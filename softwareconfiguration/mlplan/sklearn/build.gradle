dependencies {
	compile (project(':JAICore:jaicore-ml')) {
		exclude group: 'org.nd4j'
		exclude group: 'org.deeplearning4j'
		exclude group: 'edu.stanford.nlp'
	}
	compile (project(':JAICore:jaicore-ml-weka')) {
		exclude group: 'org.nd4j'
		exclude group: 'org.deeplearning4j'
		exclude group: 'edu.stanford.nlp'
	}
	compile project(':mlplan-core')
	
	/* dependencies to the test sources of other projects */
	testCompile project(path: ':JAICore:jaicore-search', configuration: 'testArtifacts')
	testCompile project(path: ':JAICore:jaicore-components', configuration: 'testArtifacts')
	testCompile project(path: ':JAICore:jaicore-basic', configuration: 'testArtifacts')
	testCompile project(path: ':JAICore:jaicore-ml', configuration: 'testArtifacts')
	testCompile project(path: ':mlplan-core', configuration: 'testArtifacts')
}

task testCoreFunctionality(type: Test) {
	useJUnitPlatform{
		filter {
			excludeTestsMatching "ai.libs.mlplan.sklearnmlplan.MLPlanScikitLearnClassificationResultDeliveryTester"
			excludeTestsMatching "ai.libs.mlplan.sklearnmlplan.MLPlanScikitLearnRegressionResultDeliveryTester"
		}
	}
}

task testClassification(type: Test) {
	useJUnitPlatform{
		filter {
			includeTestsMatching "ai.libs.mlplan.sklearnmlplan.MLPlanScikitLearnClassificationResultDeliveryTester"
		}
	}
}

task testRegression(type: Test) {
	useJUnitPlatform{
		filter {
			includeTestsMatching "ai.libs.mlplan.sklearnmlplan.MLPlanScikitLearnRegressionResultDeliveryTester"
		}
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        		authentication(userName: "${ossrhUsername}", password: "${ossrhPassword}")
      		}	
      		snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        		authentication(userName: "${ossrhUsername}", password: "${ossrhPassword}")
      		}

      		pom.project {
        		name 'MLPlan-SKLearn'
        		packaging 'jar'
        		// optionally artifactId can be defined here 
        		description 'This project provides an implementation of the AutoML tool ML-Plan for scikit-learn.'
        		url 'https://libs.ai'

        		scm {
          			connection 'scm:git:https://github.com/fmohr/AILibs.git'
          			developerConnection 'scm:git:https://github.com/fmohr/AILibs.git'
          			url 'https://github.com/fmohr/AILibs'
        		}

        		licenses {
          			license {
            			name 'GPLv3'
            			url 'https://www.gnu.org/licenses/gpl-3.0.en.html'
          			}
        		}

        		developers {
          			developer {
            			id 'fmohr'
            			name 'Felix Mohr'
            			email 'felix.mohr@upb.de'
          			}
          			developer {
          				id 'mwever'    
          			    name 'Marcel Wever'
          			    email 'marcel.wever@upb.de'
          			}
          			developer {
          			    id 'ahetzer'
          			    name 'Alexander Hetzer'
          			    email 'alexander.hetzer@upb.de'
          			}
        		}
      		}
    	}
  	}
}