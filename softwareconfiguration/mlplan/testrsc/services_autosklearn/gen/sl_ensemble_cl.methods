

#--------------------------#
#   ExtraTreesClassifier   #
#--------------------------#

sl_ExtraTreesClassifier;			slCreate_classifier_ensemble(c); c,p; ; ; de.upb.crc901.mlplan.services.MLPipelinePlan:setClassifier(c,'sklearn.ensemble.ExtraTreesClassifier',p)	->	sl-ExtraTreesClassifier-set-bootstrap(c,p)	->	sl-ExtraTreesClassifier-set-criterion(c,p)	->	sl-ExtraTreesClassifier-set-max_features(c,p)	->	sl-ExtraTreesClassifier-set-min_impurity_decrease(c,p)	->	sl-ExtraTreesClassifier-set-min_samples_leaf(c,p)	->	sl-ExtraTreesClassifier-set-min_samples_split(c,p)	->	sl-ExtraTreesClassifier-set-min_weight_fraction_leaf(c,p)	->	sl-ExtraTreesClassifier-set-n_estimators(c,p)	->	sl-ExtraTreesClassifier-set-n_jobs(c,p)	->	sl-ExtraTreesClassifier-set-oob_score(c,p)	->	sl-ExtraTreesClassifier-set-verbose(c,p)	->	sl-ExtraTreesClassifier-set-warm_start(c,p)


#-------------------------------------------------------#
#     Option Configuration for ExtraTreesClassifier     #
#-------------------------------------------------------#

sl-ExtraTreesClassifier-set-bootstrap;		sl-ExtraTreesClassifier-set-bootstrap(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-bootstrap;		sl-ExtraTreesClassifier-set-bootstrap(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_bootstrap(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-bootstrap', t)
sl-ExtraTreesClassifier-set-criterion;		sl-ExtraTreesClassifier-set-criterion(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-criterion;		sl-ExtraTreesClassifier-set-criterion(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_criterion(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-criterion', t)
sl-ExtraTreesClassifier-set-max_features;		sl-ExtraTreesClassifier-set-max_features(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-max_features;		sl-ExtraTreesClassifier-set-max_features(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_max_features(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_features', t)
sl-ExtraTreesClassifier-set-min_impurity_decrease;		sl-ExtraTreesClassifier-set-min_impurity_decrease(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-min_impurity_decrease;		sl-ExtraTreesClassifier-set-min_impurity_decrease(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_min_impurity_decrease(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_impurity_decrease', t)
sl-ExtraTreesClassifier-set-min_samples_leaf;		sl-ExtraTreesClassifier-set-min_samples_leaf(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-min_samples_leaf;		sl-ExtraTreesClassifier-set-min_samples_leaf(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_min_samples_leaf(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_samples_leaf', t)
sl-ExtraTreesClassifier-set-min_samples_split;		sl-ExtraTreesClassifier-set-min_samples_split(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-min_samples_split;		sl-ExtraTreesClassifier-set-min_samples_split(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_min_samples_split(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_samples_split', t)
sl-ExtraTreesClassifier-set-min_weight_fraction_leaf;		sl-ExtraTreesClassifier-set-min_weight_fraction_leaf(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-min_weight_fraction_leaf;		sl-ExtraTreesClassifier-set-min_weight_fraction_leaf(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_min_weight_fraction_leaf(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_weight_fraction_leaf', t)
sl-ExtraTreesClassifier-set-n_estimators;		sl-ExtraTreesClassifier-set-n_estimators(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-n_estimators;		sl-ExtraTreesClassifier-set-n_estimators(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_n_estimators(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_estimators', t)
sl-ExtraTreesClassifier-set-n_jobs;		sl-ExtraTreesClassifier-set-n_jobs(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-n_jobs;		sl-ExtraTreesClassifier-set-n_jobs(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-ExtraTreesClassifier-set-oob_score;		sl-ExtraTreesClassifier-set-oob_score(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-oob_score;		sl-ExtraTreesClassifier-set-oob_score(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_oob_score(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-oob_score', t)
sl-ExtraTreesClassifier-set-verbose;		sl-ExtraTreesClassifier-set-verbose(c,p); c,p; ; ;  noop()
sl-ExtraTreesClassifier-set-verbose;		sl-ExtraTreesClassifier-set-verbose(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-ExtraTreesClassifier-set-warm_start;		sl-ExtraTreesClassifier-set-warm_start(c,p); c,p; ; ;  noop()
#sl-ExtraTreesClassifier-set-warm_start;		sl-ExtraTreesClassifier-set-warm_start(c,p); c,p,t; ; OptionsFor_ExtraTreesClassifier_warm_start(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-warm_start', t)


#--------------------------------#
#   GradientBoostingClassifier   #
#--------------------------------#

sl_GradientBoostingClassifier;			slCreate_classifier_ensemble(c); c,p; ; ; de.upb.crc901.mlplan.services.MLPipelinePlan:setClassifier(c,'sklearn.ensemble.GradientBoostingClassifier',p)	->	sl-GradientBoostingClassifier-set-criterion(c,p)	->	sl-GradientBoostingClassifier-set-learning_rate(c,p)	->	sl-GradientBoostingClassifier-set-loss(c,p)	->	sl-GradientBoostingClassifier-set-max_depth(c,p)	->	sl-GradientBoostingClassifier-set-min_impurity_decrease(c,p)	->	sl-GradientBoostingClassifier-set-min_samples_leaf(c,p)	->	sl-GradientBoostingClassifier-set-min_samples_split(c,p)	->	sl-GradientBoostingClassifier-set-min_weight_fraction_leaf(c,p)	->	sl-GradientBoostingClassifier-set-n_estimators(c,p)	->	sl-GradientBoostingClassifier-set-presort(c,p)	->	sl-GradientBoostingClassifier-set-subsample(c,p)	->	sl-GradientBoostingClassifier-set-verbose(c,p)	->	sl-GradientBoostingClassifier-set-warm_start(c,p)


#-------------------------------------------------------------#
#     Option Configuration for GradientBoostingClassifier     #
#-------------------------------------------------------------#

sl-GradientBoostingClassifier-set-criterion;		sl-GradientBoostingClassifier-set-criterion(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-criterion;		sl-GradientBoostingClassifier-set-criterion(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_criterion(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-criterion', t)
sl-GradientBoostingClassifier-set-learning_rate;		sl-GradientBoostingClassifier-set-learning_rate(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-learning_rate;		sl-GradientBoostingClassifier-set-learning_rate(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_learning_rate(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-learning_rate', t)
sl-GradientBoostingClassifier-set-loss;		sl-GradientBoostingClassifier-set-loss(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-loss;		sl-GradientBoostingClassifier-set-loss(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_loss(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-loss', t)
sl-GradientBoostingClassifier-set-max_depth;		sl-GradientBoostingClassifier-set-max_depth(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-max_depth;		sl-GradientBoostingClassifier-set-max_depth(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_max_depth(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_depth', t)
sl-GradientBoostingClassifier-set-min_impurity_decrease;		sl-GradientBoostingClassifier-set-min_impurity_decrease(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-min_impurity_decrease;		sl-GradientBoostingClassifier-set-min_impurity_decrease(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_min_impurity_decrease(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_impurity_decrease', t)
sl-GradientBoostingClassifier-set-min_samples_leaf;		sl-GradientBoostingClassifier-set-min_samples_leaf(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-min_samples_leaf;		sl-GradientBoostingClassifier-set-min_samples_leaf(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_min_samples_leaf(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_samples_leaf', t)
sl-GradientBoostingClassifier-set-min_samples_split;		sl-GradientBoostingClassifier-set-min_samples_split(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-min_samples_split;		sl-GradientBoostingClassifier-set-min_samples_split(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_min_samples_split(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_samples_split', t)
sl-GradientBoostingClassifier-set-min_weight_fraction_leaf;		sl-GradientBoostingClassifier-set-min_weight_fraction_leaf(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-min_weight_fraction_leaf;		sl-GradientBoostingClassifier-set-min_weight_fraction_leaf(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_min_weight_fraction_leaf(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_weight_fraction_leaf', t)
sl-GradientBoostingClassifier-set-n_estimators;		sl-GradientBoostingClassifier-set-n_estimators(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-n_estimators;		sl-GradientBoostingClassifier-set-n_estimators(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_n_estimators(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_estimators', t)
sl-GradientBoostingClassifier-set-presort;		sl-GradientBoostingClassifier-set-presort(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-presort;		sl-GradientBoostingClassifier-set-presort(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_presort(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-presort', t)
sl-GradientBoostingClassifier-set-subsample;		sl-GradientBoostingClassifier-set-subsample(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-subsample;		sl-GradientBoostingClassifier-set-subsample(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_subsample(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-subsample', t)
sl-GradientBoostingClassifier-set-verbose;		sl-GradientBoostingClassifier-set-verbose(c,p); c,p; ; ;  noop()
sl-GradientBoostingClassifier-set-verbose;		sl-GradientBoostingClassifier-set-verbose(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-GradientBoostingClassifier-set-warm_start;		sl-GradientBoostingClassifier-set-warm_start(c,p); c,p; ; ;  noop()
#sl-GradientBoostingClassifier-set-warm_start;		sl-GradientBoostingClassifier-set-warm_start(c,p); c,p,t; ; OptionsFor_GradientBoostingClassifier_warm_start(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-warm_start', t)


#----------------------------#
#   RandomForestClassifier   #
#----------------------------#

sl_RandomForestClassifier;			slCreate_classifier_ensemble(c); c,p; ; ; de.upb.crc901.mlplan.services.MLPipelinePlan:setClassifier(c,'sklearn.ensemble.RandomForestClassifier',p)	->	sl-RandomForestClassifier-set-bootstrap(c,p)	->	sl-RandomForestClassifier-set-criterion(c,p)	->	sl-RandomForestClassifier-set-max_features(c,p)	->	sl-RandomForestClassifier-set-min_impurity_decrease(c,p)	->	sl-RandomForestClassifier-set-min_samples_leaf(c,p)	->	sl-RandomForestClassifier-set-min_samples_split(c,p)	->	sl-RandomForestClassifier-set-min_weight_fraction_leaf(c,p)	->	sl-RandomForestClassifier-set-n_estimators(c,p)	->	sl-RandomForestClassifier-set-n_jobs(c,p)	->	sl-RandomForestClassifier-set-oob_score(c,p)	->	sl-RandomForestClassifier-set-verbose(c,p)	->	sl-RandomForestClassifier-set-warm_start(c,p)


#---------------------------------------------------------#
#     Option Configuration for RandomForestClassifier     #
#---------------------------------------------------------#

sl-RandomForestClassifier-set-bootstrap;		sl-RandomForestClassifier-set-bootstrap(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-bootstrap;		sl-RandomForestClassifier-set-bootstrap(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_bootstrap(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-bootstrap', t)
sl-RandomForestClassifier-set-criterion;		sl-RandomForestClassifier-set-criterion(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-criterion;		sl-RandomForestClassifier-set-criterion(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_criterion(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-criterion', t)
sl-RandomForestClassifier-set-max_features;		sl-RandomForestClassifier-set-max_features(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-max_features;		sl-RandomForestClassifier-set-max_features(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_max_features(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_features', t)
sl-RandomForestClassifier-set-min_impurity_decrease;		sl-RandomForestClassifier-set-min_impurity_decrease(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-min_impurity_decrease;		sl-RandomForestClassifier-set-min_impurity_decrease(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_min_impurity_decrease(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_impurity_decrease', t)
sl-RandomForestClassifier-set-min_samples_leaf;		sl-RandomForestClassifier-set-min_samples_leaf(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-min_samples_leaf;		sl-RandomForestClassifier-set-min_samples_leaf(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_min_samples_leaf(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_samples_leaf', t)
sl-RandomForestClassifier-set-min_samples_split;		sl-RandomForestClassifier-set-min_samples_split(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-min_samples_split;		sl-RandomForestClassifier-set-min_samples_split(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_min_samples_split(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_samples_split', t)
sl-RandomForestClassifier-set-min_weight_fraction_leaf;		sl-RandomForestClassifier-set-min_weight_fraction_leaf(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-min_weight_fraction_leaf;		sl-RandomForestClassifier-set-min_weight_fraction_leaf(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_min_weight_fraction_leaf(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_weight_fraction_leaf', t)
sl-RandomForestClassifier-set-n_estimators;		sl-RandomForestClassifier-set-n_estimators(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-n_estimators;		sl-RandomForestClassifier-set-n_estimators(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_n_estimators(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_estimators', t)
sl-RandomForestClassifier-set-n_jobs;		sl-RandomForestClassifier-set-n_jobs(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-n_jobs;		sl-RandomForestClassifier-set-n_jobs(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-RandomForestClassifier-set-oob_score;		sl-RandomForestClassifier-set-oob_score(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-oob_score;		sl-RandomForestClassifier-set-oob_score(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_oob_score(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-oob_score', t)
sl-RandomForestClassifier-set-verbose;		sl-RandomForestClassifier-set-verbose(c,p); c,p; ; ;  noop()
sl-RandomForestClassifier-set-verbose;		sl-RandomForestClassifier-set-verbose(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-RandomForestClassifier-set-warm_start;		sl-RandomForestClassifier-set-warm_start(c,p); c,p; ; ;  noop()
#sl-RandomForestClassifier-set-warm_start;		sl-RandomForestClassifier-set-warm_start(c,p); c,p,t; ; OptionsFor_RandomForestClassifier_warm_start(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-warm_start', t)
