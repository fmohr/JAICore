

#-------------#
#   FastICA   #
#-------------#

sl_FastICA;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.decomposition.FastICA',config)
sl_FastICA;			slConfigure_pp_as(config); config,pipe; associated('sklearn.decomposition.FastICA',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.decomposition.FastICA',pipe)	->	sl-FastICA-set-algorithm(config,pipe)	->	sl-FastICA-set-fun(config,pipe)	->	sl-FastICA-set-max_iter(config,pipe)	->	sl-FastICA-set-tol(config,pipe)	->	sl-FastICA-set-whiten(config,pipe)


#------------------------------------------#
#     Option Configuration for FastICA     #
#------------------------------------------#

sl-FastICA-set-algorithm;		sl-FastICA-set-algorithm(c,p); c,p; ; ;  noop()
sl-FastICA-set-algorithm;		sl-FastICA-set-algorithm(c,p); c,p,t; ; OptionsFor_FastICA_algorithm(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-algorithm', t)
sl-FastICA-set-fun;		sl-FastICA-set-fun(c,p); c,p; ; ;  noop()
sl-FastICA-set-fun;		sl-FastICA-set-fun(c,p); c,p,t; ; OptionsFor_FastICA_fun(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-fun', t)
sl-FastICA-set-max_iter;		sl-FastICA-set-max_iter(c,p); c,p; ; ;  noop()
sl-FastICA-set-max_iter;		sl-FastICA-set-max_iter(c,p); c,p,t; ; OptionsFor_FastICA_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-FastICA-set-tol;		sl-FastICA-set-tol(c,p); c,p; ; ;  noop()
sl-FastICA-set-tol;		sl-FastICA-set-tol(c,p); c,p,t; ; OptionsFor_FastICA_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-FastICA-set-whiten;		sl-FastICA-set-whiten(c,p); c,p; ; ;  noop()
sl-FastICA-set-whiten;		sl-FastICA-set-whiten(c,p); c,p,t; ; OptionsFor_FastICA_whiten(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-whiten', t)


#-----------------------------#
#   GenericUnivariateSelect   #
#-----------------------------#

#sl_GenericUnivariateSelect;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.feature_selection.GenericUnivariateSelect',config)
sl_GenericUnivariateSelect;			slConfigure_pp_as(config); config,pipe; associated('sklearn.feature_selection.GenericUnivariateSelect',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.feature_selection.GenericUnivariateSelect',pipe)	->	sl-GenericUnivariateSelect-set-mode(config,pipe)	->	sl-GenericUnivariateSelect-set-param(config,pipe)	->	sl-GenericUnivariateSelect-set-score_func(config,pipe)


#----------------------------------------------------------#
#     Option Configuration for GenericUnivariateSelect     #
#----------------------------------------------------------#

sl-GenericUnivariateSelect-set-mode;		sl-GenericUnivariateSelect-set-mode(c,p); c,p; ; ;  noop()
sl-GenericUnivariateSelect-set-mode;		sl-GenericUnivariateSelect-set-mode(c,p); c,p,t; ; OptionsFor_GenericUnivariateSelect_mode(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-mode', t)
sl-GenericUnivariateSelect-set-param;		sl-GenericUnivariateSelect-set-param(c,p); c,p; ; ;  noop()
sl-GenericUnivariateSelect-set-param;		sl-GenericUnivariateSelect-set-param(c,p); c,p,t; ; OptionsFor_GenericUnivariateSelect_param(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-param', t)
sl-GenericUnivariateSelect-set-score_func;		sl-GenericUnivariateSelect-set-score_func(c,p); c,p; ; ;  noop()
sl-GenericUnivariateSelect-set-score_func;		sl-GenericUnivariateSelect-set-score_func(c,p); c,p,t; ; OptionsFor_GenericUnivariateSelect_score_func(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-score_func', t)


#------------#
#   Isomap   #
#------------#

#sl_Isomap;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.manifold.Isomap',config)
sl_Isomap;			slConfigure_pp_as(config); config,pipe; associated('sklearn.manifold.Isomap',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.manifold.Isomap',pipe)	->	sl-Isomap-set-eigen_solver(config,pipe)	->	sl-Isomap-set-n_components(config,pipe)	->	sl-Isomap-set-n_jobs(config,pipe)	->	sl-Isomap-set-n_neighbors(config,pipe)	->	sl-Isomap-set-neighbors_algorithm(config,pipe)	->	sl-Isomap-set-path_method(config,pipe)	->	sl-Isomap-set-tol(config,pipe)


#-----------------------------------------#
#     Option Configuration for Isomap     #
#-----------------------------------------#

sl-Isomap-set-eigen_solver;		sl-Isomap-set-eigen_solver(c,p); c,p; ; ;  noop()
sl-Isomap-set-eigen_solver;		sl-Isomap-set-eigen_solver(c,p); c,p,t; ; OptionsFor_Isomap_eigen_solver(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-eigen_solver', t)
sl-Isomap-set-n_components;		sl-Isomap-set-n_components(c,p); c,p; ; ;  noop()
sl-Isomap-set-n_components;		sl-Isomap-set-n_components(c,p); c,p,t; ; OptionsFor_Isomap_n_components(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_components', t)
sl-Isomap-set-n_jobs;		sl-Isomap-set-n_jobs(c,p); c,p; ; ;  noop()
sl-Isomap-set-n_jobs;		sl-Isomap-set-n_jobs(c,p); c,p,t; ; OptionsFor_Isomap_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-Isomap-set-n_neighbors;		sl-Isomap-set-n_neighbors(c,p); c,p; ; ;  noop()
sl-Isomap-set-n_neighbors;		sl-Isomap-set-n_neighbors(c,p); c,p,t; ; OptionsFor_Isomap_n_neighbors(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_neighbors', t)
sl-Isomap-set-neighbors_algorithm;		sl-Isomap-set-neighbors_algorithm(c,p); c,p; ; ;  noop()
sl-Isomap-set-neighbors_algorithm;		sl-Isomap-set-neighbors_algorithm(c,p); c,p,t; ; OptionsFor_Isomap_neighbors_algorithm(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-neighbors_algorithm', t)
sl-Isomap-set-path_method;		sl-Isomap-set-path_method(c,p); c,p; ; ;  noop()
sl-Isomap-set-path_method;		sl-Isomap-set-path_method(c,p); c,p,t; ; OptionsFor_Isomap_path_method(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-path_method', t)
sl-Isomap-set-tol;		sl-Isomap-set-tol(c,p); c,p; ; ;  noop()
sl-Isomap-set-tol;		sl-Isomap-set-tol(c,p); c,p,t; ; OptionsFor_Isomap_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)


#----------------------------#
#   LocallyLinearEmbedding   #
#----------------------------#

#sl_LocallyLinearEmbedding;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.manifold.LocallyLinearEmbedding',config)
sl_LocallyLinearEmbedding;			slConfigure_pp_as(config); config,pipe; associated('sklearn.manifold.LocallyLinearEmbedding',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.manifold.LocallyLinearEmbedding',pipe)	->	sl-LocallyLinearEmbedding-set-eigen_solver(config,pipe)	->	sl-LocallyLinearEmbedding-set-hessian_tol(config,pipe)	->	sl-LocallyLinearEmbedding-set-max_iter(config,pipe)	->	sl-LocallyLinearEmbedding-set-method(config,pipe)	->	sl-LocallyLinearEmbedding-set-modified_tol(config,pipe)	->	sl-LocallyLinearEmbedding-set-n_components(config,pipe)	->	sl-LocallyLinearEmbedding-set-n_jobs(config,pipe)	->	sl-LocallyLinearEmbedding-set-n_neighbors(config,pipe)	->	sl-LocallyLinearEmbedding-set-neighbors_algorithm(config,pipe)	->	sl-LocallyLinearEmbedding-set-reg(config,pipe)	->	sl-LocallyLinearEmbedding-set-tol(config,pipe)


#---------------------------------------------------------#
#     Option Configuration for LocallyLinearEmbedding     #
#---------------------------------------------------------#

sl-LocallyLinearEmbedding-set-eigen_solver;		sl-LocallyLinearEmbedding-set-eigen_solver(c,p); c,p; ; ;  noop()
sl-LocallyLinearEmbedding-set-eigen_solver;		sl-LocallyLinearEmbedding-set-eigen_solver(c,p); c,p,t; ; OptionsFor_LocallyLinearEmbedding_eigen_solver(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-eigen_solver', t)
sl-LocallyLinearEmbedding-set-hessian_tol;		sl-LocallyLinearEmbedding-set-hessian_tol(c,p); c,p; ; ;  noop()
sl-LocallyLinearEmbedding-set-hessian_tol;		sl-LocallyLinearEmbedding-set-hessian_tol(c,p); c,p,t; ; OptionsFor_LocallyLinearEmbedding_hessian_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-hessian_tol', t)
sl-LocallyLinearEmbedding-set-max_iter;		sl-LocallyLinearEmbedding-set-max_iter(c,p); c,p; ; ;  noop()
sl-LocallyLinearEmbedding-set-max_iter;		sl-LocallyLinearEmbedding-set-max_iter(c,p); c,p,t; ; OptionsFor_LocallyLinearEmbedding_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-LocallyLinearEmbedding-set-method;		sl-LocallyLinearEmbedding-set-method(c,p); c,p; ; ;  noop()
sl-LocallyLinearEmbedding-set-method;		sl-LocallyLinearEmbedding-set-method(c,p); c,p,t; ; OptionsFor_LocallyLinearEmbedding_method(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-method', t)
sl-LocallyLinearEmbedding-set-modified_tol;		sl-LocallyLinearEmbedding-set-modified_tol(c,p); c,p; ; ;  noop()
sl-LocallyLinearEmbedding-set-modified_tol;		sl-LocallyLinearEmbedding-set-modified_tol(c,p); c,p,t; ; OptionsFor_LocallyLinearEmbedding_modified_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-modified_tol', t)
sl-LocallyLinearEmbedding-set-n_components;		sl-LocallyLinearEmbedding-set-n_components(c,p); c,p; ; ;  noop()
sl-LocallyLinearEmbedding-set-n_components;		sl-LocallyLinearEmbedding-set-n_components(c,p); c,p,t; ; OptionsFor_LocallyLinearEmbedding_n_components(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_components', t)
sl-LocallyLinearEmbedding-set-n_jobs;		sl-LocallyLinearEmbedding-set-n_jobs(c,p); c,p; ; ;  noop()
sl-LocallyLinearEmbedding-set-n_jobs;		sl-LocallyLinearEmbedding-set-n_jobs(c,p); c,p,t; ; OptionsFor_LocallyLinearEmbedding_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-LocallyLinearEmbedding-set-n_neighbors;		sl-LocallyLinearEmbedding-set-n_neighbors(c,p); c,p; ; ;  noop()
sl-LocallyLinearEmbedding-set-n_neighbors;		sl-LocallyLinearEmbedding-set-n_neighbors(c,p); c,p,t; ; OptionsFor_LocallyLinearEmbedding_n_neighbors(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_neighbors', t)
sl-LocallyLinearEmbedding-set-neighbors_algorithm;		sl-LocallyLinearEmbedding-set-neighbors_algorithm(c,p); c,p; ; ;  noop()
sl-LocallyLinearEmbedding-set-neighbors_algorithm;		sl-LocallyLinearEmbedding-set-neighbors_algorithm(c,p); c,p,t; ; OptionsFor_LocallyLinearEmbedding_neighbors_algorithm(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-neighbors_algorithm', t)
sl-LocallyLinearEmbedding-set-reg;		sl-LocallyLinearEmbedding-set-reg(c,p); c,p; ; ;  noop()
sl-LocallyLinearEmbedding-set-reg;		sl-LocallyLinearEmbedding-set-reg(c,p); c,p,t; ; OptionsFor_LocallyLinearEmbedding_reg(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-reg', t)
sl-LocallyLinearEmbedding-set-tol;		sl-LocallyLinearEmbedding-set-tol(c,p); c,p; ; ;  noop()
sl-LocallyLinearEmbedding-set-tol;		sl-LocallyLinearEmbedding-set-tol(c,p); c,p,t; ; OptionsFor_LocallyLinearEmbedding_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)


#---------#
#   MDS   #
#---------#

#sl_MDS;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.manifold.MDS',config)
sl_MDS;			slConfigure_pp_as(config); config,pipe; associated('sklearn.manifold.MDS',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.manifold.MDS',pipe)	->	sl-MDS-set-dissimilarity(config,pipe)	->	sl-MDS-set-eps(config,pipe)	->	sl-MDS-set-max_iter(config,pipe)	->	sl-MDS-set-metric(config,pipe)	->	sl-MDS-set-n_components(config,pipe)	->	sl-MDS-set-n_init(config,pipe)	->	sl-MDS-set-n_jobs(config,pipe)	->	sl-MDS-set-verbose(config,pipe)


#--------------------------------------#
#     Option Configuration for MDS     #
#--------------------------------------#

sl-MDS-set-dissimilarity;		sl-MDS-set-dissimilarity(c,p); c,p; ; ;  noop()
sl-MDS-set-dissimilarity;		sl-MDS-set-dissimilarity(c,p); c,p,t; ; OptionsFor_MDS_dissimilarity(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-dissimilarity', t)
sl-MDS-set-eps;		sl-MDS-set-eps(c,p); c,p; ; ;  noop()
sl-MDS-set-eps;		sl-MDS-set-eps(c,p); c,p,t; ; OptionsFor_MDS_eps(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-eps', t)
sl-MDS-set-max_iter;		sl-MDS-set-max_iter(c,p); c,p; ; ;  noop()
sl-MDS-set-max_iter;		sl-MDS-set-max_iter(c,p); c,p,t; ; OptionsFor_MDS_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-MDS-set-metric;		sl-MDS-set-metric(c,p); c,p; ; ;  noop()
sl-MDS-set-metric;		sl-MDS-set-metric(c,p); c,p,t; ; OptionsFor_MDS_metric(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-metric', t)
sl-MDS-set-n_components;		sl-MDS-set-n_components(c,p); c,p; ; ;  noop()
sl-MDS-set-n_components;		sl-MDS-set-n_components(c,p); c,p,t; ; OptionsFor_MDS_n_components(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_components', t)
sl-MDS-set-n_init;		sl-MDS-set-n_init(c,p); c,p; ; ;  noop()
sl-MDS-set-n_init;		sl-MDS-set-n_init(c,p); c,p,t; ; OptionsFor_MDS_n_init(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_init', t)
sl-MDS-set-n_jobs;		sl-MDS-set-n_jobs(c,p); c,p; ; ;  noop()
sl-MDS-set-n_jobs;		sl-MDS-set-n_jobs(c,p); c,p,t; ; OptionsFor_MDS_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-MDS-set-verbose;		sl-MDS-set-verbose(c,p); c,p; ; ;  noop()
sl-MDS-set-verbose;		sl-MDS-set-verbose(c,p); c,p,t; ; OptionsFor_MDS_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#---------------------------------#
#   MiniBatchDictionaryLearning   #
#---------------------------------#

#sl_MiniBatchDictionaryLearning;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.decomposition.MiniBatchDictionaryLearning',config)
sl_MiniBatchDictionaryLearning;			slConfigure_pp_as(config); config,pipe; associated('sklearn.decomposition.MiniBatchDictionaryLearning',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.decomposition.MiniBatchDictionaryLearning',pipe)	->	sl-MiniBatchDictionaryLearning-set-alpha(config,pipe)	->	sl-MiniBatchDictionaryLearning-set-batch_size(config,pipe)	->	sl-MiniBatchDictionaryLearning-set-fit_algorithm(config,pipe)	->	sl-MiniBatchDictionaryLearning-set-n_iter(config,pipe)	->	sl-MiniBatchDictionaryLearning-set-n_jobs(config,pipe)	->	sl-MiniBatchDictionaryLearning-set-shuffle(config,pipe)	->	sl-MiniBatchDictionaryLearning-set-split_sign(config,pipe)	->	sl-MiniBatchDictionaryLearning-set-transform_algorithm(config,pipe)	->	sl-MiniBatchDictionaryLearning-set-verbose(config,pipe)


#--------------------------------------------------------------#
#     Option Configuration for MiniBatchDictionaryLearning     #
#--------------------------------------------------------------#

sl-MiniBatchDictionaryLearning-set-alpha;		sl-MiniBatchDictionaryLearning-set-alpha(c,p); c,p; ; ;  noop()
sl-MiniBatchDictionaryLearning-set-alpha;		sl-MiniBatchDictionaryLearning-set-alpha(c,p); c,p,t; ; OptionsFor_MiniBatchDictionaryLearning_alpha(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-MiniBatchDictionaryLearning-set-batch_size;		sl-MiniBatchDictionaryLearning-set-batch_size(c,p); c,p; ; ;  noop()
sl-MiniBatchDictionaryLearning-set-batch_size;		sl-MiniBatchDictionaryLearning-set-batch_size(c,p); c,p,t; ; OptionsFor_MiniBatchDictionaryLearning_batch_size(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-batch_size', t)
sl-MiniBatchDictionaryLearning-set-fit_algorithm;		sl-MiniBatchDictionaryLearning-set-fit_algorithm(c,p); c,p; ; ;  noop()
sl-MiniBatchDictionaryLearning-set-fit_algorithm;		sl-MiniBatchDictionaryLearning-set-fit_algorithm(c,p); c,p,t; ; OptionsFor_MiniBatchDictionaryLearning_fit_algorithm(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-fit_algorithm', t)
sl-MiniBatchDictionaryLearning-set-n_iter;		sl-MiniBatchDictionaryLearning-set-n_iter(c,p); c,p; ; ;  noop()
sl-MiniBatchDictionaryLearning-set-n_iter;		sl-MiniBatchDictionaryLearning-set-n_iter(c,p); c,p,t; ; OptionsFor_MiniBatchDictionaryLearning_n_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_iter', t)
sl-MiniBatchDictionaryLearning-set-n_jobs;		sl-MiniBatchDictionaryLearning-set-n_jobs(c,p); c,p; ; ;  noop()
sl-MiniBatchDictionaryLearning-set-n_jobs;		sl-MiniBatchDictionaryLearning-set-n_jobs(c,p); c,p,t; ; OptionsFor_MiniBatchDictionaryLearning_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-MiniBatchDictionaryLearning-set-shuffle;		sl-MiniBatchDictionaryLearning-set-shuffle(c,p); c,p; ; ;  noop()
sl-MiniBatchDictionaryLearning-set-shuffle;		sl-MiniBatchDictionaryLearning-set-shuffle(c,p); c,p,t; ; OptionsFor_MiniBatchDictionaryLearning_shuffle(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-shuffle', t)
sl-MiniBatchDictionaryLearning-set-split_sign;		sl-MiniBatchDictionaryLearning-set-split_sign(c,p); c,p; ; ;  noop()
sl-MiniBatchDictionaryLearning-set-split_sign;		sl-MiniBatchDictionaryLearning-set-split_sign(c,p); c,p,t; ; OptionsFor_MiniBatchDictionaryLearning_split_sign(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-split_sign', t)
sl-MiniBatchDictionaryLearning-set-transform_algorithm;		sl-MiniBatchDictionaryLearning-set-transform_algorithm(c,p); c,p; ; ;  noop()
sl-MiniBatchDictionaryLearning-set-transform_algorithm;		sl-MiniBatchDictionaryLearning-set-transform_algorithm(c,p); c,p,t; ; OptionsFor_MiniBatchDictionaryLearning_transform_algorithm(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-transform_algorithm', t)
sl-MiniBatchDictionaryLearning-set-verbose;		sl-MiniBatchDictionaryLearning-set-verbose(c,p); c,p; ; ;  noop()
sl-MiniBatchDictionaryLearning-set-verbose;		sl-MiniBatchDictionaryLearning-set-verbose(c,p); c,p,t; ; OptionsFor_MiniBatchDictionaryLearning_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#---------#
#   NMF   #
#---------#

#sl_NMF;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.decomposition.NMF',config)
sl_NMF;			slConfigure_pp_as(config); config,pipe; associated('sklearn.decomposition.NMF',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.decomposition.NMF',pipe)	->	sl-NMF-set-alpha(config,pipe)	->	sl-NMF-set-beta_loss(config,pipe)	->	sl-NMF-set-l1_ratio(config,pipe)	->	sl-NMF-set-max_iter(config,pipe)	->	sl-NMF-set-shuffle(config,pipe)	->	sl-NMF-set-solver(config,pipe)	->	sl-NMF-set-tol(config,pipe)	->	sl-NMF-set-verbose(config,pipe)


#--------------------------------------#
#     Option Configuration for NMF     #
#--------------------------------------#

sl-NMF-set-alpha;		sl-NMF-set-alpha(c,p); c,p; ; ;  noop()
sl-NMF-set-alpha;		sl-NMF-set-alpha(c,p); c,p,t; ; OptionsFor_NMF_alpha(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-NMF-set-beta_loss;		sl-NMF-set-beta_loss(c,p); c,p; ; ;  noop()
sl-NMF-set-beta_loss;		sl-NMF-set-beta_loss(c,p); c,p,t; ; OptionsFor_NMF_beta_loss(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-beta_loss', t)
sl-NMF-set-l1_ratio;		sl-NMF-set-l1_ratio(c,p); c,p; ; ;  noop()
sl-NMF-set-l1_ratio;		sl-NMF-set-l1_ratio(c,p); c,p,t; ; OptionsFor_NMF_l1_ratio(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-l1_ratio', t)
sl-NMF-set-max_iter;		sl-NMF-set-max_iter(c,p); c,p; ; ;  noop()
sl-NMF-set-max_iter;		sl-NMF-set-max_iter(c,p); c,p,t; ; OptionsFor_NMF_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-NMF-set-shuffle;		sl-NMF-set-shuffle(c,p); c,p; ; ;  noop()
sl-NMF-set-shuffle;		sl-NMF-set-shuffle(c,p); c,p,t; ; OptionsFor_NMF_shuffle(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-shuffle', t)
sl-NMF-set-solver;		sl-NMF-set-solver(c,p); c,p; ; ;  noop()
sl-NMF-set-solver;		sl-NMF-set-solver(c,p); c,p,t; ; OptionsFor_NMF_solver(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-solver', t)
sl-NMF-set-tol;		sl-NMF-set-tol(c,p); c,p; ; ;  noop()
sl-NMF-set-tol;		sl-NMF-set-tol(c,p); c,p,t; ; OptionsFor_NMF_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-NMF-set-verbose;		sl-NMF-set-verbose(c,p); c,p; ; ;  noop()
sl-NMF-set-verbose;		sl-NMF-set-verbose(c,p); c,p,t; ; OptionsFor_NMF_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#---------------#
#   SelectFdr   #
#---------------#

#sl_SelectFdr;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.feature_selection.SelectFdr',config)
sl_SelectFdr;			slConfigure_pp_as(config); config,pipe; associated('sklearn.feature_selection.SelectFdr',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.feature_selection.SelectFdr',pipe)	->	sl-SelectFdr-set-alpha(config,pipe)	->	sl-SelectFdr-set-score_func(config,pipe)


#--------------------------------------------#
#     Option Configuration for SelectFdr     #
#--------------------------------------------#

sl-SelectFdr-set-alpha;		sl-SelectFdr-set-alpha(c,p); c,p; ; ;  noop()
sl-SelectFdr-set-alpha;		sl-SelectFdr-set-alpha(c,p); c,p,t; ; OptionsFor_SelectFdr_alpha(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-SelectFdr-set-score_func;		sl-SelectFdr-set-score_func(c,p); c,p; ; ;  noop()
sl-SelectFdr-set-score_func;		sl-SelectFdr-set-score_func(c,p); c,p,t; ; OptionsFor_SelectFdr_score_func(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-score_func', t)


#---------------#
#   SelectFpr   #
#---------------#

#sl_SelectFpr;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.feature_selection.SelectFpr',config)
sl_SelectFpr;			slConfigure_pp_as(config); config,pipe; associated('sklearn.feature_selection.SelectFpr',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.feature_selection.SelectFpr',pipe)	->	sl-SelectFpr-set-alpha(config,pipe)	->	sl-SelectFpr-set-score_func(config,pipe)


#--------------------------------------------#
#     Option Configuration for SelectFpr     #
#--------------------------------------------#

sl-SelectFpr-set-alpha;		sl-SelectFpr-set-alpha(c,p); c,p; ; ;  noop()
sl-SelectFpr-set-alpha;		sl-SelectFpr-set-alpha(c,p); c,p,t; ; OptionsFor_SelectFpr_alpha(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-SelectFpr-set-score_func;		sl-SelectFpr-set-score_func(c,p); c,p; ; ;  noop()
sl-SelectFpr-set-score_func;		sl-SelectFpr-set-score_func(c,p); c,p,t; ; OptionsFor_SelectFpr_score_func(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-score_func', t)


#---------------#
#   SelectFwe   #
#---------------#

sl_SelectFwe;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.feature_selection.SelectFwe',config)
sl_SelectFwe;			slConfigure_pp_as(config); config,pipe; associated('sklearn.feature_selection.SelectFwe',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.feature_selection.SelectFwe',pipe)	->	sl-SelectFwe-set-alpha(config,pipe)	->	sl-SelectFwe-set-score_func(config,pipe)


#--------------------------------------------#
#     Option Configuration for SelectFwe     #
#--------------------------------------------#

sl-SelectFwe-set-alpha;		sl-SelectFwe-set-alpha(c,p); c,p; ; ;  noop()
sl-SelectFwe-set-alpha;		sl-SelectFwe-set-alpha(c,p); c,p,t; ; OptionsFor_SelectFwe_alpha(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-SelectFwe-set-score_func;		sl-SelectFwe-set-score_func(c,p); c,p; ; ;  noop()
sl-SelectFwe-set-score_func;		sl-SelectFwe-set-score_func(c,p); c,p,t; ; OptionsFor_SelectFwe_score_func(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-score_func', t)


#-----------------#
#   SelectKBest   #
#-----------------#

sl_SelectKBest;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.feature_selection.SelectKBest',config)
sl_SelectKBest;			slConfigure_pp_as(config); config,pipe; associated('sklearn.feature_selection.SelectKBest',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.feature_selection.SelectKBest',pipe)	->	sl-SelectKBest-set-k(config,pipe)	->	sl-SelectKBest-set-score_func(config,pipe)


#----------------------------------------------#
#     Option Configuration for SelectKBest     #
#----------------------------------------------#

sl-SelectKBest-set-k;		sl-SelectKBest-set-k(c,p); c,p; ; ;  noop()
sl-SelectKBest-set-k;		sl-SelectKBest-set-k(c,p); c,p,t; ; OptionsFor_SelectKBest_k(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-k', t)
sl-SelectKBest-set-score_func;		sl-SelectKBest-set-score_func(c,p); c,p; ; ;  noop()
sl-SelectKBest-set-score_func;		sl-SelectKBest-set-score_func(c,p); c,p,t; ; OptionsFor_SelectKBest_score_func(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-score_func', t)


#----------------------#
#   SelectPercentile   #
#----------------------#

sl_SelectPercentile;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.feature_selection.SelectPercentile',config)
sl_SelectPercentile;			slConfigure_pp_as(config); config,pipe; associated('sklearn.feature_selection.SelectPercentile',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.feature_selection.SelectPercentile',pipe)	->	sl-SelectPercentile-set-percentile(config,pipe)	->	sl-SelectPercentile-set-score_func(config,pipe)


#---------------------------------------------------#
#     Option Configuration for SelectPercentile     #
#---------------------------------------------------#

sl-SelectPercentile-set-percentile;		sl-SelectPercentile-set-percentile(c,p); c,p; ; ;  noop()
sl-SelectPercentile-set-percentile;		sl-SelectPercentile-set-percentile(c,p); c,p,t; ; OptionsFor_SelectPercentile_percentile(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-percentile', t)
sl-SelectPercentile-set-score_func;		sl-SelectPercentile-set-score_func(c,p); c,p; ; ;  noop()
sl-SelectPercentile-set-score_func;		sl-SelectPercentile-set-score_func(c,p); c,p,t; ; OptionsFor_SelectPercentile_score_func(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-score_func', t)


#----------------------------#
#   SparseRandomProjection   #
#----------------------------#

sl_SparseRandomProjection;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.random_projection.SparseRandomProjection',config)
sl_SparseRandomProjection;			slConfigure_pp_as(config); config,pipe; associated('sklearn.random_projection.SparseRandomProjection',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.random_projection.SparseRandomProjection',pipe)	->	sl-SparseRandomProjection-set-dense_output(config,pipe)	->	sl-SparseRandomProjection-set-density(config,pipe)	->	sl-SparseRandomProjection-set-eps(config,pipe)	->	sl-SparseRandomProjection-set-n_components(config,pipe)


#---------------------------------------------------------#
#     Option Configuration for SparseRandomProjection     #
#---------------------------------------------------------#

sl-SparseRandomProjection-set-dense_output;		sl-SparseRandomProjection-set-dense_output(c,p); c,p; ; ;  noop()
sl-SparseRandomProjection-set-dense_output;		sl-SparseRandomProjection-set-dense_output(c,p); c,p,t; ; OptionsFor_SparseRandomProjection_dense_output(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-dense_output', t)
sl-SparseRandomProjection-set-density;		sl-SparseRandomProjection-set-density(c,p); c,p; ; ;  noop()
sl-SparseRandomProjection-set-density;		sl-SparseRandomProjection-set-density(c,p); c,p,t; ; OptionsFor_SparseRandomProjection_density(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-density', t)
sl-SparseRandomProjection-set-eps;		sl-SparseRandomProjection-set-eps(c,p); c,p; ; ;  noop()
sl-SparseRandomProjection-set-eps;		sl-SparseRandomProjection-set-eps(c,p); c,p,t; ; OptionsFor_SparseRandomProjection_eps(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-eps', t)
sl-SparseRandomProjection-set-n_components;		sl-SparseRandomProjection-set-n_components(c,p); c,p; ; ;  noop()
sl-SparseRandomProjection-set-n_components;		sl-SparseRandomProjection-set-n_components(c,p); c,p,t; ; OptionsFor_SparseRandomProjection_n_components(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_components', t)


#-----------------------#
#   SpectralEmbedding   #
#-----------------------#

#sl_SpectralEmbedding;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.manifold.SpectralEmbedding',config)
sl_SpectralEmbedding;			slConfigure_pp_as(config); config,pipe; associated('sklearn.manifold.SpectralEmbedding',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.manifold.SpectralEmbedding',pipe)	->	sl-SpectralEmbedding-set-affinity(config,pipe)	->	sl-SpectralEmbedding-set-n_components(config,pipe)	->	sl-SpectralEmbedding-set-n_jobs(config,pipe)


#----------------------------------------------------#
#     Option Configuration for SpectralEmbedding     #
#----------------------------------------------------#

sl-SpectralEmbedding-set-affinity;		sl-SpectralEmbedding-set-affinity(c,p); c,p; ; ;  noop()
sl-SpectralEmbedding-set-affinity;		sl-SpectralEmbedding-set-affinity(c,p); c,p,t; ; OptionsFor_SpectralEmbedding_affinity(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-affinity', t)
sl-SpectralEmbedding-set-n_components;		sl-SpectralEmbedding-set-n_components(c,p); c,p; ; ;  noop()
sl-SpectralEmbedding-set-n_components;		sl-SpectralEmbedding-set-n_components(c,p); c,p,t; ; OptionsFor_SpectralEmbedding_n_components(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_components', t)
sl-SpectralEmbedding-set-n_jobs;		sl-SpectralEmbedding-set-n_jobs(c,p); c,p; ; ;  noop()
sl-SpectralEmbedding-set-n_jobs;		sl-SpectralEmbedding-set-n_jobs(c,p); c,p,t; ; OptionsFor_SpectralEmbedding_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)


#----------#
#   TSNE   #
#----------#

#sl_TSNE;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.manifold.TSNE',config)
sl_TSNE;			slConfigure_pp_as(config); config,pipe; associated('sklearn.manifold.TSNE',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.manifold.TSNE',pipe)	->	sl-TSNE-set-angle(config,pipe)	->	sl-TSNE-set-early_exaggeration(config,pipe)	->	sl-TSNE-set-init(config,pipe)	->	sl-TSNE-set-learning_rate(config,pipe)	->	sl-TSNE-set-method(config,pipe)	->	sl-TSNE-set-metric(config,pipe)	->	sl-TSNE-set-min_grad_norm(config,pipe)	->	sl-TSNE-set-n_components(config,pipe)	->	sl-TSNE-set-n_iter(config,pipe)	->	sl-TSNE-set-n_iter_without_progress(config,pipe)	->	sl-TSNE-set-perplexity(config,pipe)	->	sl-TSNE-set-verbose(config,pipe)


#---------------------------------------#
#     Option Configuration for TSNE     #
#---------------------------------------#

sl-TSNE-set-angle;		sl-TSNE-set-angle(c,p); c,p; ; ;  noop()
sl-TSNE-set-angle;		sl-TSNE-set-angle(c,p); c,p,t; ; OptionsFor_TSNE_angle(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-angle', t)
sl-TSNE-set-early_exaggeration;		sl-TSNE-set-early_exaggeration(c,p); c,p; ; ;  noop()
sl-TSNE-set-early_exaggeration;		sl-TSNE-set-early_exaggeration(c,p); c,p,t; ; OptionsFor_TSNE_early_exaggeration(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-early_exaggeration', t)
sl-TSNE-set-init;		sl-TSNE-set-init(c,p); c,p; ; ;  noop()
sl-TSNE-set-init;		sl-TSNE-set-init(c,p); c,p,t; ; OptionsFor_TSNE_init(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-init', t)
sl-TSNE-set-learning_rate;		sl-TSNE-set-learning_rate(c,p); c,p; ; ;  noop()
sl-TSNE-set-learning_rate;		sl-TSNE-set-learning_rate(c,p); c,p,t; ; OptionsFor_TSNE_learning_rate(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-learning_rate', t)
sl-TSNE-set-method;		sl-TSNE-set-method(c,p); c,p; ; ;  noop()
sl-TSNE-set-method;		sl-TSNE-set-method(c,p); c,p,t; ; OptionsFor_TSNE_method(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-method', t)
sl-TSNE-set-metric;		sl-TSNE-set-metric(c,p); c,p; ; ;  noop()
sl-TSNE-set-metric;		sl-TSNE-set-metric(c,p); c,p,t; ; OptionsFor_TSNE_metric(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-metric', t)
sl-TSNE-set-min_grad_norm;		sl-TSNE-set-min_grad_norm(c,p); c,p; ; ;  noop()
sl-TSNE-set-min_grad_norm;		sl-TSNE-set-min_grad_norm(c,p); c,p,t; ; OptionsFor_TSNE_min_grad_norm(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_grad_norm', t)
sl-TSNE-set-n_components;		sl-TSNE-set-n_components(c,p); c,p; ; ;  noop()
sl-TSNE-set-n_components;		sl-TSNE-set-n_components(c,p); c,p,t; ; OptionsFor_TSNE_n_components(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_components', t)
sl-TSNE-set-n_iter;		sl-TSNE-set-n_iter(c,p); c,p; ; ;  noop()
sl-TSNE-set-n_iter;		sl-TSNE-set-n_iter(c,p); c,p,t; ; OptionsFor_TSNE_n_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_iter', t)
sl-TSNE-set-n_iter_without_progress;		sl-TSNE-set-n_iter_without_progress(c,p); c,p; ; ;  noop()
sl-TSNE-set-n_iter_without_progress;		sl-TSNE-set-n_iter_without_progress(c,p); c,p,t; ; OptionsFor_TSNE_n_iter_without_progress(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_iter_without_progress', t)
sl-TSNE-set-perplexity;		sl-TSNE-set-perplexity(c,p); c,p; ; ;  noop()
sl-TSNE-set-perplexity;		sl-TSNE-set-perplexity(c,p); c,p,t; ; OptionsFor_TSNE_perplexity(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-perplexity', t)
sl-TSNE-set-verbose;		sl-TSNE-set-verbose(c,p); c,p; ; ;  noop()
sl-TSNE-set-verbose;		sl-TSNE-set-verbose(c,p); c,p,t; ; OptionsFor_TSNE_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#-----------------------#
#   VarianceThreshold   #
#-----------------------#

#sl_VarianceThreshold;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.feature_selection.VarianceThreshold',config)
sl_VarianceThreshold;			slConfigure_pp_as(config); config,pipe; associated('sklearn.feature_selection.VarianceThreshold',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.feature_selection.VarianceThreshold',pipe)	->	sl-VarianceThreshold-set-threshold(config,pipe)


#----------------------------------------------------#
#     Option Configuration for VarianceThreshold     #
#----------------------------------------------------#

sl-VarianceThreshold-set-threshold;		sl-VarianceThreshold-set-threshold(c,p); c,p; ; ;  noop()
sl-VarianceThreshold-set-threshold;		sl-VarianceThreshold-set-threshold(c,p); c,p,t; ; OptionsFor_VarianceThreshold_threshold(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-threshold', t)


#-------------------------#
#   AdditiveChi2Sampler   #
#-------------------------#

#sl_AdditiveChi2Sampler;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.kernel_approximation.AdditiveChi2Sampler',config)
sl_AdditiveChi2Sampler;			slConfigure_pp_as(config); config,pipe; associated('sklearn.kernel_approximation.AdditiveChi2Sampler',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.kernel_approximation.AdditiveChi2Sampler',pipe)	->	sl-AdditiveChi2Sampler-set-sample_steps(config,pipe)


#------------------------------------------------------#
#     Option Configuration for AdditiveChi2Sampler     #
#------------------------------------------------------#

sl-AdditiveChi2Sampler-set-sample_steps;		sl-AdditiveChi2Sampler-set-sample_steps(c,p); c,p; ; ;  noop()
sl-AdditiveChi2Sampler-set-sample_steps;		sl-AdditiveChi2Sampler-set-sample_steps(c,p); c,p,t; ; OptionsFor_AdditiveChi2Sampler_sample_steps(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-sample_steps', t)


#------------------#
#   BernoulliRBM   #
#------------------#

#sl_BernoulliRBM;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.neural_network.BernoulliRBM',config)
sl_BernoulliRBM;			slConfigure_pp_as(config); config,pipe; associated('sklearn.neural_network.BernoulliRBM',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.neural_network.BernoulliRBM',pipe)	->	sl-BernoulliRBM-set-batch_size(config,pipe)	->	sl-BernoulliRBM-set-learning_rate(config,pipe)	->	sl-BernoulliRBM-set-n_components(config,pipe)	->	sl-BernoulliRBM-set-n_iter(config,pipe)	->	sl-BernoulliRBM-set-verbose(config,pipe)


#-----------------------------------------------#
#     Option Configuration for BernoulliRBM     #
#-----------------------------------------------#

sl-BernoulliRBM-set-batch_size;		sl-BernoulliRBM-set-batch_size(c,p); c,p; ; ;  noop()
sl-BernoulliRBM-set-batch_size;		sl-BernoulliRBM-set-batch_size(c,p); c,p,t; ; OptionsFor_BernoulliRBM_batch_size(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-batch_size', t)
sl-BernoulliRBM-set-learning_rate;		sl-BernoulliRBM-set-learning_rate(c,p); c,p; ; ;  noop()
sl-BernoulliRBM-set-learning_rate;		sl-BernoulliRBM-set-learning_rate(c,p); c,p,t; ; OptionsFor_BernoulliRBM_learning_rate(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-learning_rate', t)
sl-BernoulliRBM-set-n_components;		sl-BernoulliRBM-set-n_components(c,p); c,p; ; ;  noop()
sl-BernoulliRBM-set-n_components;		sl-BernoulliRBM-set-n_components(c,p); c,p,t; ; OptionsFor_BernoulliRBM_n_components(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_components', t)
sl-BernoulliRBM-set-n_iter;		sl-BernoulliRBM-set-n_iter(c,p); c,p; ; ;  noop()
sl-BernoulliRBM-set-n_iter;		sl-BernoulliRBM-set-n_iter(c,p); c,p,t; ; OptionsFor_BernoulliRBM_n_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_iter', t)
sl-BernoulliRBM-set-verbose;		sl-BernoulliRBM-set-verbose(c,p); c,p; ; ;  noop()
sl-BernoulliRBM-set-verbose;		sl-BernoulliRBM-set-verbose(c,p); c,p,t; ; OptionsFor_BernoulliRBM_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#---------------#
#   Binarizer   #
#---------------#

#sl_Binarizer;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.preprocessing.Binarizer',config)
sl_Binarizer;			slConfigure_pp_as(config); config,pipe; associated('sklearn.preprocessing.Binarizer',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.preprocessing.Binarizer',pipe)	->	sl-Binarizer-set-copy(config,pipe)	->	sl-Binarizer-set-threshold(config,pipe)


#--------------------------------------------#
#     Option Configuration for Binarizer     #
#--------------------------------------------#

sl-Binarizer-set-copy;		sl-Binarizer-set-copy(c,p); c,p; ; ;  noop()
sl-Binarizer-set-copy;		sl-Binarizer-set-copy(c,p); c,p,t; ; OptionsFor_Binarizer_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-Binarizer-set-threshold;		sl-Binarizer-set-threshold(c,p); c,p; ; ;  noop()
sl-Binarizer-set-threshold;		sl-Binarizer-set-threshold(c,p); c,p,t; ; OptionsFor_Binarizer_threshold(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-threshold', t)


#------------------------#
#   DictionaryLearning   #
#------------------------#

#sl_DictionaryLearning;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.decomposition.DictionaryLearning',config)
sl_DictionaryLearning;			slConfigure_pp_as(config); config,pipe; associated('sklearn.decomposition.DictionaryLearning',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.decomposition.DictionaryLearning',pipe)	->	sl-DictionaryLearning-set-alpha(config,pipe)	->	sl-DictionaryLearning-set-fit_algorithm(config,pipe)	->	sl-DictionaryLearning-set-max_iter(config,pipe)	->	sl-DictionaryLearning-set-n_jobs(config,pipe)	->	sl-DictionaryLearning-set-split_sign(config,pipe)	->	sl-DictionaryLearning-set-tol(config,pipe)	->	sl-DictionaryLearning-set-transform_algorithm(config,pipe)	->	sl-DictionaryLearning-set-verbose(config,pipe)


#-----------------------------------------------------#
#     Option Configuration for DictionaryLearning     #
#-----------------------------------------------------#

sl-DictionaryLearning-set-alpha;		sl-DictionaryLearning-set-alpha(c,p); c,p; ; ;  noop()
sl-DictionaryLearning-set-alpha;		sl-DictionaryLearning-set-alpha(c,p); c,p,t; ; OptionsFor_DictionaryLearning_alpha(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-DictionaryLearning-set-fit_algorithm;		sl-DictionaryLearning-set-fit_algorithm(c,p); c,p; ; ;  noop()
sl-DictionaryLearning-set-fit_algorithm;		sl-DictionaryLearning-set-fit_algorithm(c,p); c,p,t; ; OptionsFor_DictionaryLearning_fit_algorithm(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-fit_algorithm', t)
sl-DictionaryLearning-set-max_iter;		sl-DictionaryLearning-set-max_iter(c,p); c,p; ; ;  noop()
sl-DictionaryLearning-set-max_iter;		sl-DictionaryLearning-set-max_iter(c,p); c,p,t; ; OptionsFor_DictionaryLearning_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-DictionaryLearning-set-n_jobs;		sl-DictionaryLearning-set-n_jobs(c,p); c,p; ; ;  noop()
sl-DictionaryLearning-set-n_jobs;		sl-DictionaryLearning-set-n_jobs(c,p); c,p,t; ; OptionsFor_DictionaryLearning_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-DictionaryLearning-set-split_sign;		sl-DictionaryLearning-set-split_sign(c,p); c,p; ; ;  noop()
sl-DictionaryLearning-set-split_sign;		sl-DictionaryLearning-set-split_sign(c,p); c,p,t; ; OptionsFor_DictionaryLearning_split_sign(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-split_sign', t)
sl-DictionaryLearning-set-tol;		sl-DictionaryLearning-set-tol(c,p); c,p; ; ;  noop()
sl-DictionaryLearning-set-tol;		sl-DictionaryLearning-set-tol(c,p); c,p,t; ; OptionsFor_DictionaryLearning_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-DictionaryLearning-set-transform_algorithm;		sl-DictionaryLearning-set-transform_algorithm(c,p); c,p; ; ;  noop()
sl-DictionaryLearning-set-transform_algorithm;		sl-DictionaryLearning-set-transform_algorithm(c,p); c,p,t; ; OptionsFor_DictionaryLearning_transform_algorithm(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-transform_algorithm', t)
sl-DictionaryLearning-set-verbose;		sl-DictionaryLearning-set-verbose(c,p); c,p; ; ;  noop()
sl-DictionaryLearning-set-verbose;		sl-DictionaryLearning-set-verbose(c,p); c,p,t; ; OptionsFor_DictionaryLearning_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#--------------------#
#   FactorAnalysis   #
#--------------------#

#sl_FactorAnalysis;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.decomposition.FactorAnalysis',config)
sl_FactorAnalysis;			slConfigure_pp_as(config); config,pipe; associated('sklearn.decomposition.FactorAnalysis',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.decomposition.FactorAnalysis',pipe)	->	sl-FactorAnalysis-set-copy(config,pipe)	->	sl-FactorAnalysis-set-iterated_power(config,pipe)	->	sl-FactorAnalysis-set-max_iter(config,pipe)	->	sl-FactorAnalysis-set-random_state(config,pipe)	->	sl-FactorAnalysis-set-svd_method(config,pipe)	->	sl-FactorAnalysis-set-tol(config,pipe)


#-------------------------------------------------#
#     Option Configuration for FactorAnalysis     #
#-------------------------------------------------#

sl-FactorAnalysis-set-copy;		sl-FactorAnalysis-set-copy(c,p); c,p; ; ;  noop()
sl-FactorAnalysis-set-copy;		sl-FactorAnalysis-set-copy(c,p); c,p,t; ; OptionsFor_FactorAnalysis_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-FactorAnalysis-set-iterated_power;		sl-FactorAnalysis-set-iterated_power(c,p); c,p; ; ;  noop()
sl-FactorAnalysis-set-iterated_power;		sl-FactorAnalysis-set-iterated_power(c,p); c,p,t; ; OptionsFor_FactorAnalysis_iterated_power(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-iterated_power', t)
sl-FactorAnalysis-set-max_iter;		sl-FactorAnalysis-set-max_iter(c,p); c,p; ; ;  noop()
sl-FactorAnalysis-set-max_iter;		sl-FactorAnalysis-set-max_iter(c,p); c,p,t; ; OptionsFor_FactorAnalysis_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-FactorAnalysis-set-random_state;		sl-FactorAnalysis-set-random_state(c,p); c,p; ; ;  noop()
sl-FactorAnalysis-set-random_state;		sl-FactorAnalysis-set-random_state(c,p); c,p,t; ; OptionsFor_FactorAnalysis_random_state(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-random_state', t)
sl-FactorAnalysis-set-svd_method;		sl-FactorAnalysis-set-svd_method(c,p); c,p; ; ;  noop()
sl-FactorAnalysis-set-svd_method;		sl-FactorAnalysis-set-svd_method(c,p); c,p,t; ; OptionsFor_FactorAnalysis_svd_method(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-svd_method', t)
sl-FactorAnalysis-set-tol;		sl-FactorAnalysis-set-tol(c,p); c,p; ; ;  noop()
sl-FactorAnalysis-set-tol;		sl-FactorAnalysis-set-tol(c,p); c,p,t; ; OptionsFor_FactorAnalysis_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)


#------------------------------#
#   GaussianRandomProjection   #
#------------------------------#

sl_GaussianRandomProjection;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.random_projection.GaussianRandomProjection',config)
sl_GaussianRandomProjection;			slConfigure_pp_as(config); config,pipe; associated('sklearn.random_projection.GaussianRandomProjection',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.random_projection.GaussianRandomProjection',pipe)	->	sl-GaussianRandomProjection-set-eps(config,pipe)	->	sl-GaussianRandomProjection-set-n_components(config,pipe)


#-----------------------------------------------------------#
#     Option Configuration for GaussianRandomProjection     #
#-----------------------------------------------------------#

sl-GaussianRandomProjection-set-eps;		sl-GaussianRandomProjection-set-eps(c,p); c,p; ; ;  noop()
sl-GaussianRandomProjection-set-eps;		sl-GaussianRandomProjection-set-eps(c,p); c,p,t; ; OptionsFor_GaussianRandomProjection_eps(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-eps', t)
sl-GaussianRandomProjection-set-n_components;		sl-GaussianRandomProjection-set-n_components(c,p); c,p; ; ;  noop()
sl-GaussianRandomProjection-set-n_components;		sl-GaussianRandomProjection-set-n_components(c,p); c,p,t; ; OptionsFor_GaussianRandomProjection_n_components(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_components', t)


#----------------#
#   GraphLasso   #
#----------------#

#sl_GraphLasso;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.covariance.GraphLasso',config)
sl_GraphLasso;			slConfigure_pp_as(config); config,pipe; associated('sklearn.covariance.GraphLasso',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.covariance.GraphLasso',pipe)	->	sl-GraphLasso-set-alpha(config,pipe)	->	sl-GraphLasso-set-assume_centered(config,pipe)	->	sl-GraphLasso-set-enet_tol(config,pipe)	->	sl-GraphLasso-set-max_iter(config,pipe)	->	sl-GraphLasso-set-mode(config,pipe)	->	sl-GraphLasso-set-tol(config,pipe)	->	sl-GraphLasso-set-verbose(config,pipe)


#---------------------------------------------#
#     Option Configuration for GraphLasso     #
#---------------------------------------------#

sl-GraphLasso-set-alpha;		sl-GraphLasso-set-alpha(c,p); c,p; ; ;  noop()
sl-GraphLasso-set-alpha;		sl-GraphLasso-set-alpha(c,p); c,p,t; ; OptionsFor_GraphLasso_alpha(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-GraphLasso-set-assume_centered;		sl-GraphLasso-set-assume_centered(c,p); c,p; ; ;  noop()
sl-GraphLasso-set-assume_centered;		sl-GraphLasso-set-assume_centered(c,p); c,p,t; ; OptionsFor_GraphLasso_assume_centered(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-assume_centered', t)
sl-GraphLasso-set-enet_tol;		sl-GraphLasso-set-enet_tol(c,p); c,p; ; ;  noop()
sl-GraphLasso-set-enet_tol;		sl-GraphLasso-set-enet_tol(c,p); c,p,t; ; OptionsFor_GraphLasso_enet_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-enet_tol', t)
sl-GraphLasso-set-max_iter;		sl-GraphLasso-set-max_iter(c,p); c,p; ; ;  noop()
sl-GraphLasso-set-max_iter;		sl-GraphLasso-set-max_iter(c,p); c,p,t; ; OptionsFor_GraphLasso_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-GraphLasso-set-mode;		sl-GraphLasso-set-mode(c,p); c,p; ; ;  noop()
sl-GraphLasso-set-mode;		sl-GraphLasso-set-mode(c,p); c,p,t; ; OptionsFor_GraphLasso_mode(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-mode', t)
sl-GraphLasso-set-tol;		sl-GraphLasso-set-tol(c,p); c,p; ; ;  noop()
sl-GraphLasso-set-tol;		sl-GraphLasso-set-tol(c,p); c,p,t; ; OptionsFor_GraphLasso_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-GraphLasso-set-verbose;		sl-GraphLasso-set-verbose(c,p); c,p; ; ;  noop()
sl-GraphLasso-set-verbose;		sl-GraphLasso-set-verbose(c,p); c,p,t; ; OptionsFor_GraphLasso_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#------------------#
#   GraphLassoCV   #
#------------------#

#sl_GraphLassoCV;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.covariance.GraphLassoCV',config)
sl_GraphLassoCV;			slConfigure_pp_as(config); config,pipe; associated('sklearn.covariance.GraphLassoCV',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.covariance.GraphLassoCV',pipe)	->	sl-GraphLassoCV-set-alphas(config,pipe)	->	sl-GraphLassoCV-set-assume_centered(config,pipe)	->	sl-GraphLassoCV-set-enet_tol(config,pipe)	->	sl-GraphLassoCV-set-max_iter(config,pipe)	->	sl-GraphLassoCV-set-mode(config,pipe)	->	sl-GraphLassoCV-set-n_jobs(config,pipe)	->	sl-GraphLassoCV-set-n_refinements(config,pipe)	->	sl-GraphLassoCV-set-tol(config,pipe)	->	sl-GraphLassoCV-set-verbose(config,pipe)


#-----------------------------------------------#
#     Option Configuration for GraphLassoCV     #
#-----------------------------------------------#

sl-GraphLassoCV-set-alphas;		sl-GraphLassoCV-set-alphas(c,p); c,p; ; ;  noop()
sl-GraphLassoCV-set-alphas;		sl-GraphLassoCV-set-alphas(c,p); c,p,t; ; OptionsFor_GraphLassoCV_alphas(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-alphas', t)
sl-GraphLassoCV-set-assume_centered;		sl-GraphLassoCV-set-assume_centered(c,p); c,p; ; ;  noop()
sl-GraphLassoCV-set-assume_centered;		sl-GraphLassoCV-set-assume_centered(c,p); c,p,t; ; OptionsFor_GraphLassoCV_assume_centered(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-assume_centered', t)
sl-GraphLassoCV-set-enet_tol;		sl-GraphLassoCV-set-enet_tol(c,p); c,p; ; ;  noop()
sl-GraphLassoCV-set-enet_tol;		sl-GraphLassoCV-set-enet_tol(c,p); c,p,t; ; OptionsFor_GraphLassoCV_enet_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-enet_tol', t)
sl-GraphLassoCV-set-max_iter;		sl-GraphLassoCV-set-max_iter(c,p); c,p; ; ;  noop()
sl-GraphLassoCV-set-max_iter;		sl-GraphLassoCV-set-max_iter(c,p); c,p,t; ; OptionsFor_GraphLassoCV_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-GraphLassoCV-set-mode;		sl-GraphLassoCV-set-mode(c,p); c,p; ; ;  noop()
sl-GraphLassoCV-set-mode;		sl-GraphLassoCV-set-mode(c,p); c,p,t; ; OptionsFor_GraphLassoCV_mode(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-mode', t)
sl-GraphLassoCV-set-n_jobs;		sl-GraphLassoCV-set-n_jobs(c,p); c,p; ; ;  noop()
sl-GraphLassoCV-set-n_jobs;		sl-GraphLassoCV-set-n_jobs(c,p); c,p,t; ; OptionsFor_GraphLassoCV_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-GraphLassoCV-set-n_refinements;		sl-GraphLassoCV-set-n_refinements(c,p); c,p; ; ;  noop()
sl-GraphLassoCV-set-n_refinements;		sl-GraphLassoCV-set-n_refinements(c,p); c,p,t; ; OptionsFor_GraphLassoCV_n_refinements(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_refinements', t)
sl-GraphLassoCV-set-tol;		sl-GraphLassoCV-set-tol(c,p); c,p; ; ;  noop()
sl-GraphLassoCV-set-tol;		sl-GraphLassoCV-set-tol(c,p); c,p,t; ; OptionsFor_GraphLassoCV_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-GraphLassoCV-set-verbose;		sl-GraphLassoCV-set-verbose(c,p); c,p; ; ;  noop()
sl-GraphLassoCV-set-verbose;		sl-GraphLassoCV-set-verbose(c,p); c,p,t; ; OptionsFor_GraphLassoCV_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#-------------#
#   Imputer   #
#-------------#

sl_Imputer;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.preprocessing.Imputer',config)
sl_Imputer;			slConfigure_pp_as(config); config,pipe; associated('sklearn.preprocessing.Imputer',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.preprocessing.Imputer',pipe)	->	sl-Imputer-set-axis(config,pipe)	->	sl-Imputer-set-copy(config,pipe)	->	sl-Imputer-set-missing_values(config,pipe)	->	sl-Imputer-set-strategy(config,pipe)	->	sl-Imputer-set-verbose(config,pipe)


#------------------------------------------#
#     Option Configuration for Imputer     #
#------------------------------------------#

sl-Imputer-set-axis;		sl-Imputer-set-axis(c,p); c,p; ; ;  noop()
sl-Imputer-set-axis;		sl-Imputer-set-axis(c,p); c,p,t; ; OptionsFor_Imputer_axis(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-axis', t)
sl-Imputer-set-copy;		sl-Imputer-set-copy(c,p); c,p; ; ;  noop()
sl-Imputer-set-copy;		sl-Imputer-set-copy(c,p); c,p,t; ; OptionsFor_Imputer_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-Imputer-set-missing_values;		sl-Imputer-set-missing_values(c,p); c,p; ; ;  noop()
sl-Imputer-set-missing_values;		sl-Imputer-set-missing_values(c,p); c,p,t; ; OptionsFor_Imputer_missing_values(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-missing_values', t)
sl-Imputer-set-strategy;		sl-Imputer-set-strategy(c,p); c,p; ; ;  noop()
sl-Imputer-set-strategy;		sl-Imputer-set-strategy(c,p); c,p,t; ; OptionsFor_Imputer_strategy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-strategy', t)
sl-Imputer-set-verbose;		sl-Imputer-set-verbose(c,p); c,p; ; ;  noop()
sl-Imputer-set-verbose;		sl-Imputer-set-verbose(c,p); c,p,t; ; OptionsFor_Imputer_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#--------------------#
#   KernelCenterer   #
#--------------------#

sl_KernelCenterer;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.preprocessing.KernelCenterer',config)
sl_KernelCenterer;			slConfigure_pp_as(config); config,pipe; associated('sklearn.preprocessing.KernelCenterer',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.preprocessing.KernelCenterer',pipe)


#-------------------------------------------------#
#     Option Configuration for KernelCenterer     #
#-------------------------------------------------#



#-------------------------------#
#   LatentDirichletAllocation   #
#-------------------------------#

#sl_LatentDirichletAllocation;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.decomposition.LatentDirichletAllocation',config)
sl_LatentDirichletAllocation;			slConfigure_pp_as(config); config,pipe; associated('sklearn.decomposition.LatentDirichletAllocation',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.decomposition.LatentDirichletAllocation',pipe)	->	sl-LatentDirichletAllocation-set-batch_size(config,pipe)	->	sl-LatentDirichletAllocation-set-evaluate_every(config,pipe)	->	sl-LatentDirichletAllocation-set-learning_decay(config,pipe)	->	sl-LatentDirichletAllocation-set-learning_offset(config,pipe)	->	sl-LatentDirichletAllocation-set-max_doc_update_iter(config,pipe)	->	sl-LatentDirichletAllocation-set-max_iter(config,pipe)	->	sl-LatentDirichletAllocation-set-mean_change_tol(config,pipe)	->	sl-LatentDirichletAllocation-set-n_components(config,pipe)	->	sl-LatentDirichletAllocation-set-n_jobs(config,pipe)	->	sl-LatentDirichletAllocation-set-perp_tol(config,pipe)	->	sl-LatentDirichletAllocation-set-total_samples(config,pipe)	->	sl-LatentDirichletAllocation-set-verbose(config,pipe)


#------------------------------------------------------------#
#     Option Configuration for LatentDirichletAllocation     #
#------------------------------------------------------------#

sl-LatentDirichletAllocation-set-batch_size;		sl-LatentDirichletAllocation-set-batch_size(c,p); c,p; ; ;  noop()
sl-LatentDirichletAllocation-set-batch_size;		sl-LatentDirichletAllocation-set-batch_size(c,p); c,p,t; ; OptionsFor_LatentDirichletAllocation_batch_size(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-batch_size', t)
sl-LatentDirichletAllocation-set-evaluate_every;		sl-LatentDirichletAllocation-set-evaluate_every(c,p); c,p; ; ;  noop()
sl-LatentDirichletAllocation-set-evaluate_every;		sl-LatentDirichletAllocation-set-evaluate_every(c,p); c,p,t; ; OptionsFor_LatentDirichletAllocation_evaluate_every(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-evaluate_every', t)
sl-LatentDirichletAllocation-set-learning_decay;		sl-LatentDirichletAllocation-set-learning_decay(c,p); c,p; ; ;  noop()
sl-LatentDirichletAllocation-set-learning_decay;		sl-LatentDirichletAllocation-set-learning_decay(c,p); c,p,t; ; OptionsFor_LatentDirichletAllocation_learning_decay(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-learning_decay', t)
sl-LatentDirichletAllocation-set-learning_offset;		sl-LatentDirichletAllocation-set-learning_offset(c,p); c,p; ; ;  noop()
sl-LatentDirichletAllocation-set-learning_offset;		sl-LatentDirichletAllocation-set-learning_offset(c,p); c,p,t; ; OptionsFor_LatentDirichletAllocation_learning_offset(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-learning_offset', t)
sl-LatentDirichletAllocation-set-max_doc_update_iter;		sl-LatentDirichletAllocation-set-max_doc_update_iter(c,p); c,p; ; ;  noop()
sl-LatentDirichletAllocation-set-max_doc_update_iter;		sl-LatentDirichletAllocation-set-max_doc_update_iter(c,p); c,p,t; ; OptionsFor_LatentDirichletAllocation_max_doc_update_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_doc_update_iter', t)
sl-LatentDirichletAllocation-set-max_iter;		sl-LatentDirichletAllocation-set-max_iter(c,p); c,p; ; ;  noop()
sl-LatentDirichletAllocation-set-max_iter;		sl-LatentDirichletAllocation-set-max_iter(c,p); c,p,t; ; OptionsFor_LatentDirichletAllocation_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-LatentDirichletAllocation-set-mean_change_tol;		sl-LatentDirichletAllocation-set-mean_change_tol(c,p); c,p; ; ;  noop()
sl-LatentDirichletAllocation-set-mean_change_tol;		sl-LatentDirichletAllocation-set-mean_change_tol(c,p); c,p,t; ; OptionsFor_LatentDirichletAllocation_mean_change_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-mean_change_tol', t)
sl-LatentDirichletAllocation-set-n_components;		sl-LatentDirichletAllocation-set-n_components(c,p); c,p; ; ;  noop()
sl-LatentDirichletAllocation-set-n_components;		sl-LatentDirichletAllocation-set-n_components(c,p); c,p,t; ; OptionsFor_LatentDirichletAllocation_n_components(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_components', t)
sl-LatentDirichletAllocation-set-n_jobs;		sl-LatentDirichletAllocation-set-n_jobs(c,p); c,p; ; ;  noop()
sl-LatentDirichletAllocation-set-n_jobs;		sl-LatentDirichletAllocation-set-n_jobs(c,p); c,p,t; ; OptionsFor_LatentDirichletAllocation_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-LatentDirichletAllocation-set-perp_tol;		sl-LatentDirichletAllocation-set-perp_tol(c,p); c,p; ; ;  noop()
sl-LatentDirichletAllocation-set-perp_tol;		sl-LatentDirichletAllocation-set-perp_tol(c,p); c,p,t; ; OptionsFor_LatentDirichletAllocation_perp_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-perp_tol', t)
sl-LatentDirichletAllocation-set-total_samples;		sl-LatentDirichletAllocation-set-total_samples(c,p); c,p; ; ;  noop()
sl-LatentDirichletAllocation-set-total_samples;		sl-LatentDirichletAllocation-set-total_samples(c,p); c,p,t; ; OptionsFor_LatentDirichletAllocation_total_samples(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-total_samples', t)
sl-LatentDirichletAllocation-set-verbose;		sl-LatentDirichletAllocation-set-verbose(c,p); c,p; ; ;  noop()
sl-LatentDirichletAllocation-set-verbose;		sl-LatentDirichletAllocation-set-verbose(c,p); c,p,t; ; OptionsFor_LatentDirichletAllocation_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#------------------#
#   MaxAbsScaler   #
#------------------#

sl_MaxAbsScaler;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.preprocessing.MaxAbsScaler',config)
sl_MaxAbsScaler;			slConfigure_pp_as(config); config,pipe; associated('sklearn.preprocessing.MaxAbsScaler',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.preprocessing.MaxAbsScaler',pipe)	->	sl-MaxAbsScaler-set-copy(config,pipe)


#-----------------------------------------------#
#     Option Configuration for MaxAbsScaler     #
#-----------------------------------------------#

sl-MaxAbsScaler-set-copy;		sl-MaxAbsScaler-set-copy(c,p); c,p; ; ;  noop()
sl-MaxAbsScaler-set-copy;		sl-MaxAbsScaler-set-copy(c,p); c,p,t; ; OptionsFor_MaxAbsScaler_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)


#------------------#
#   MinMaxScaler   #
#------------------#

#sl_MinMaxScaler;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.preprocessing.MinMaxScaler',config)
sl_MinMaxScaler;			slConfigure_pp_as(config); config,pipe; associated('sklearn.preprocessing.MinMaxScaler',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.preprocessing.MinMaxScaler',pipe)	->	sl-MinMaxScaler-set-copy(config,pipe)	->	sl-MinMaxScaler-set-feature_range(config,pipe)


#-----------------------------------------------#
#     Option Configuration for MinMaxScaler     #
#-----------------------------------------------#

sl-MinMaxScaler-set-copy;		sl-MinMaxScaler-set-copy(c,p); c,p; ; ;  noop()
sl-MinMaxScaler-set-copy;		sl-MinMaxScaler-set-copy(c,p); c,p,t; ; OptionsFor_MinMaxScaler_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-MinMaxScaler-set-feature_range;		sl-MinMaxScaler-set-feature_range(c,p); c,p; ; ;  noop()
sl-MinMaxScaler-set-feature_range;		sl-MinMaxScaler-set-feature_range(c,p); c,p,t; ; OptionsFor_MinMaxScaler_feature_range(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-feature_range', t)


#----------------#
#   Normalizer   #
#----------------#

sl_Normalizer;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.preprocessing.Normalizer',config)
sl_Normalizer;			slConfigure_pp_as(config); config,pipe; associated('sklearn.preprocessing.Normalizer',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.preprocessing.Normalizer',pipe)	->	sl-Normalizer-set-copy(config,pipe)	->	sl-Normalizer-set-norm(config,pipe)


#---------------------------------------------#
#     Option Configuration for Normalizer     #
#---------------------------------------------#

sl-Normalizer-set-copy;		sl-Normalizer-set-copy(c,p); c,p; ; ;  noop()
sl-Normalizer-set-copy;		sl-Normalizer-set-copy(c,p); c,p,t; ; OptionsFor_Normalizer_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-Normalizer-set-norm;		sl-Normalizer-set-norm(c,p); c,p; ; ;  noop()
sl-Normalizer-set-norm;		sl-Normalizer-set-norm(c,p); c,p,t; ; OptionsFor_Normalizer_norm(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-norm', t)


#-------------------------#
#   QuantileTransformer   #
#-------------------------#

#sl_QuantileTransformer;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.preprocessing.QuantileTransformer',config)
sl_QuantileTransformer;			slConfigure_pp_as(config); config,pipe; associated('sklearn.preprocessing.QuantileTransformer',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.preprocessing.QuantileTransformer',pipe)	->	sl-QuantileTransformer-set-copy(config,pipe)	->	sl-QuantileTransformer-set-ignore_implicit_zeros(config,pipe)	->	sl-QuantileTransformer-set-n_quantiles(config,pipe)	->	sl-QuantileTransformer-set-output_distribution(config,pipe)	->	sl-QuantileTransformer-set-subsample(config,pipe)


#------------------------------------------------------#
#     Option Configuration for QuantileTransformer     #
#------------------------------------------------------#

sl-QuantileTransformer-set-copy;		sl-QuantileTransformer-set-copy(c,p); c,p; ; ;  noop()
sl-QuantileTransformer-set-copy;		sl-QuantileTransformer-set-copy(c,p); c,p,t; ; OptionsFor_QuantileTransformer_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-QuantileTransformer-set-ignore_implicit_zeros;		sl-QuantileTransformer-set-ignore_implicit_zeros(c,p); c,p; ; ;  noop()
sl-QuantileTransformer-set-ignore_implicit_zeros;		sl-QuantileTransformer-set-ignore_implicit_zeros(c,p); c,p,t; ; OptionsFor_QuantileTransformer_ignore_implicit_zeros(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-ignore_implicit_zeros', t)
sl-QuantileTransformer-set-n_quantiles;		sl-QuantileTransformer-set-n_quantiles(c,p); c,p; ; ;  noop()
sl-QuantileTransformer-set-n_quantiles;		sl-QuantileTransformer-set-n_quantiles(c,p); c,p,t; ; OptionsFor_QuantileTransformer_n_quantiles(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_quantiles', t)
sl-QuantileTransformer-set-output_distribution;		sl-QuantileTransformer-set-output_distribution(c,p); c,p; ; ;  noop()
sl-QuantileTransformer-set-output_distribution;		sl-QuantileTransformer-set-output_distribution(c,p); c,p,t; ; OptionsFor_QuantileTransformer_output_distribution(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-output_distribution', t)
sl-QuantileTransformer-set-subsample;		sl-QuantileTransformer-set-subsample(c,p); c,p; ; ;  noop()
sl-QuantileTransformer-set-subsample;		sl-QuantileTransformer-set-subsample(c,p); c,p,t; ; OptionsFor_QuantileTransformer_subsample(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-subsample', t)


#----------------------------------#
#   RandomizedLogisticRegression   #
#----------------------------------#

#sl_RandomizedLogisticRegression;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.linear_model.RandomizedLogisticRegression',config)
sl_RandomizedLogisticRegression;			slConfigure_pp_as(config); config,pipe; associated('sklearn.linear_model.RandomizedLogisticRegression',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.linear_model.RandomizedLogisticRegression',pipe)	->	sl-RandomizedLogisticRegression-set-C(config,pipe)	->	sl-RandomizedLogisticRegression-set-fit_intercept(config,pipe)	->	sl-RandomizedLogisticRegression-set-n_jobs(config,pipe)	->	sl-RandomizedLogisticRegression-set-n_resampling(config,pipe)	->	sl-RandomizedLogisticRegression-set-normalize(config,pipe)	->	sl-RandomizedLogisticRegression-set-pre_dispatch(config,pipe)	->	sl-RandomizedLogisticRegression-set-sample_fraction(config,pipe)	->	sl-RandomizedLogisticRegression-set-scaling(config,pipe)	->	sl-RandomizedLogisticRegression-set-selection_threshold(config,pipe)	->	sl-RandomizedLogisticRegression-set-tol(config,pipe)	->	sl-RandomizedLogisticRegression-set-verbose(config,pipe)


#---------------------------------------------------------------#
#     Option Configuration for RandomizedLogisticRegression     #
#---------------------------------------------------------------#

sl-RandomizedLogisticRegression-set-C;		sl-RandomizedLogisticRegression-set-C(c,p); c,p; ; ;  noop()
sl-RandomizedLogisticRegression-set-C;		sl-RandomizedLogisticRegression-set-C(c,p); c,p,t; ; OptionsFor_RandomizedLogisticRegression_C(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-C', t)
sl-RandomizedLogisticRegression-set-fit_intercept;		sl-RandomizedLogisticRegression-set-fit_intercept(c,p); c,p; ; ;  noop()
sl-RandomizedLogisticRegression-set-fit_intercept;		sl-RandomizedLogisticRegression-set-fit_intercept(c,p); c,p,t; ; OptionsFor_RandomizedLogisticRegression_fit_intercept(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-fit_intercept', t)
sl-RandomizedLogisticRegression-set-n_jobs;		sl-RandomizedLogisticRegression-set-n_jobs(c,p); c,p; ; ;  noop()
sl-RandomizedLogisticRegression-set-n_jobs;		sl-RandomizedLogisticRegression-set-n_jobs(c,p); c,p,t; ; OptionsFor_RandomizedLogisticRegression_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-RandomizedLogisticRegression-set-n_resampling;		sl-RandomizedLogisticRegression-set-n_resampling(c,p); c,p; ; ;  noop()
sl-RandomizedLogisticRegression-set-n_resampling;		sl-RandomizedLogisticRegression-set-n_resampling(c,p); c,p,t; ; OptionsFor_RandomizedLogisticRegression_n_resampling(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_resampling', t)
sl-RandomizedLogisticRegression-set-normalize;		sl-RandomizedLogisticRegression-set-normalize(c,p); c,p; ; ;  noop()
sl-RandomizedLogisticRegression-set-normalize;		sl-RandomizedLogisticRegression-set-normalize(c,p); c,p,t; ; OptionsFor_RandomizedLogisticRegression_normalize(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-normalize', t)
sl-RandomizedLogisticRegression-set-pre_dispatch;		sl-RandomizedLogisticRegression-set-pre_dispatch(c,p); c,p; ; ;  noop()
sl-RandomizedLogisticRegression-set-pre_dispatch;		sl-RandomizedLogisticRegression-set-pre_dispatch(c,p); c,p,t; ; OptionsFor_RandomizedLogisticRegression_pre_dispatch(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-pre_dispatch', t)
sl-RandomizedLogisticRegression-set-sample_fraction;		sl-RandomizedLogisticRegression-set-sample_fraction(c,p); c,p; ; ;  noop()
sl-RandomizedLogisticRegression-set-sample_fraction;		sl-RandomizedLogisticRegression-set-sample_fraction(c,p); c,p,t; ; OptionsFor_RandomizedLogisticRegression_sample_fraction(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-sample_fraction', t)
sl-RandomizedLogisticRegression-set-scaling;		sl-RandomizedLogisticRegression-set-scaling(c,p); c,p; ; ;  noop()
sl-RandomizedLogisticRegression-set-scaling;		sl-RandomizedLogisticRegression-set-scaling(c,p); c,p,t; ; OptionsFor_RandomizedLogisticRegression_scaling(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-scaling', t)
sl-RandomizedLogisticRegression-set-selection_threshold;		sl-RandomizedLogisticRegression-set-selection_threshold(c,p); c,p; ; ;  noop()
sl-RandomizedLogisticRegression-set-selection_threshold;		sl-RandomizedLogisticRegression-set-selection_threshold(c,p); c,p,t; ; OptionsFor_RandomizedLogisticRegression_selection_threshold(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-selection_threshold', t)
sl-RandomizedLogisticRegression-set-tol;		sl-RandomizedLogisticRegression-set-tol(c,p); c,p; ; ;  noop()
sl-RandomizedLogisticRegression-set-tol;		sl-RandomizedLogisticRegression-set-tol(c,p); c,p,t; ; OptionsFor_RandomizedLogisticRegression_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-RandomizedLogisticRegression-set-verbose;		sl-RandomizedLogisticRegression-set-verbose(c,p); c,p; ; ;  noop()
sl-RandomizedLogisticRegression-set-verbose;		sl-RandomizedLogisticRegression-set-verbose(c,p); c,p,t; ; OptionsFor_RandomizedLogisticRegression_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#------------------#
#   RobustScaler   #
#------------------#

sl_RobustScaler;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.preprocessing.RobustScaler',config)
sl_RobustScaler;			slConfigure_pp_as(config); config,pipe; associated('sklearn.preprocessing.RobustScaler',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.preprocessing.RobustScaler',pipe)	->	sl-RobustScaler-set-copy(config,pipe)	->	sl-RobustScaler-set-quantile_range(config,pipe)	->	sl-RobustScaler-set-with_centering(config,pipe)	->	sl-RobustScaler-set-with_scaling(config,pipe)


#-----------------------------------------------#
#     Option Configuration for RobustScaler     #
#-----------------------------------------------#

sl-RobustScaler-set-copy;		sl-RobustScaler-set-copy(c,p); c,p; ; ;  noop()
sl-RobustScaler-set-copy;		sl-RobustScaler-set-copy(c,p); c,p,t; ; OptionsFor_RobustScaler_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-RobustScaler-set-quantile_range;		sl-RobustScaler-set-quantile_range(c,p); c,p; ; ;  noop()
sl-RobustScaler-set-quantile_range;		sl-RobustScaler-set-quantile_range(c,p); c,p,t; ; OptionsFor_RobustScaler_quantile_range(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-quantile_range', t)
sl-RobustScaler-set-with_centering;		sl-RobustScaler-set-with_centering(c,p); c,p; ; ;  noop()
sl-RobustScaler-set-with_centering;		sl-RobustScaler-set-with_centering(c,p); c,p,t; ; OptionsFor_RobustScaler_with_centering(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-with_centering', t)
sl-RobustScaler-set-with_scaling;		sl-RobustScaler-set-with_scaling(c,p); c,p; ; ;  noop()
sl-RobustScaler-set-with_scaling;		sl-RobustScaler-set-with_scaling(c,p); c,p,t; ; OptionsFor_RobustScaler_with_scaling(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-with_scaling', t)


#--------------------#
#   StandardScaler   #
#--------------------#

sl_StandardScaler;			slChoose_pp_as(config); config; ; ; associateWithAssertion('sklearn.preprocessing.StandardScaler',config)
sl_StandardScaler;			slConfigure_pp_as(config); config,pipe; associated('sklearn.preprocessing.StandardScaler',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.preprocessing.StandardScaler',pipe)	->	sl-StandardScaler-set-copy(config,pipe)	->	sl-StandardScaler-set-with_mean(config,pipe)	->	sl-StandardScaler-set-with_std(config,pipe)


#-------------------------------------------------#
#     Option Configuration for StandardScaler     #
#-------------------------------------------------#

sl-StandardScaler-set-copy;		sl-StandardScaler-set-copy(c,p); c,p; ; ;  noop()
sl-StandardScaler-set-copy;		sl-StandardScaler-set-copy(c,p); c,p,t; ; OptionsFor_StandardScaler_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-StandardScaler-set-with_mean;		sl-StandardScaler-set-with_mean(c,p); c,p; ; ;  noop()
sl-StandardScaler-set-with_mean;		sl-StandardScaler-set-with_mean(c,p); c,p,t; ; OptionsFor_StandardScaler_with_mean(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-with_mean', t)
sl-StandardScaler-set-with_std;		sl-StandardScaler-set-with_std(c,p); c,p; ; ;  noop()
sl-StandardScaler-set-with_std;		sl-StandardScaler-set-with_std(c,p); c,p,t; ; OptionsFor_StandardScaler_with_std(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-with_std', t)
