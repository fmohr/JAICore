

#-------------------------#
#   AffinityPropagation   #
#-------------------------#

sl_AffinityPropagation;			slCreate_classifier_clustering(c); c,p; ; ; de.upb.crc901.mlplan.services.MLPipelinePlan:setClassifier(c,'sklearn.cluster.AffinityPropagation',p)	->	sl-AffinityPropagation-set-affinity(c,p)	->	sl-AffinityPropagation-set-convergence_iter(c,p)	->	sl-AffinityPropagation-set-copy(c,p)	->	sl-AffinityPropagation-set-damping(c,p)	->	sl-AffinityPropagation-set-max_iter(c,p)	->	sl-AffinityPropagation-set-verbose(c,p)


#------------------------------------------------------#
#     Option Configuration for AffinityPropagation     #
#------------------------------------------------------#

sl-AffinityPropagation-set-affinity;		sl-AffinityPropagation-set-affinity(c,p); c,p; ; ;  noop()
sl-AffinityPropagation-set-affinity;		sl-AffinityPropagation-set-affinity(c,p); c,p,t; ; OptionsFor_AffinityPropagation_affinity(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-affinity', t)
sl-AffinityPropagation-set-convergence_iter;		sl-AffinityPropagation-set-convergence_iter(c,p); c,p; ; ;  noop()
sl-AffinityPropagation-set-convergence_iter;		sl-AffinityPropagation-set-convergence_iter(c,p); c,p,t; ; OptionsFor_AffinityPropagation_convergence_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-convergence_iter', t)
sl-AffinityPropagation-set-copy;		sl-AffinityPropagation-set-copy(c,p); c,p; ; ;  noop()
sl-AffinityPropagation-set-copy;		sl-AffinityPropagation-set-copy(c,p); c,p,t; ; OptionsFor_AffinityPropagation_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-AffinityPropagation-set-damping;		sl-AffinityPropagation-set-damping(c,p); c,p; ; ;  noop()
sl-AffinityPropagation-set-damping;		sl-AffinityPropagation-set-damping(c,p); c,p,t; ; OptionsFor_AffinityPropagation_damping(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-damping', t)
sl-AffinityPropagation-set-max_iter;		sl-AffinityPropagation-set-max_iter(c,p); c,p; ; ;  noop()
sl-AffinityPropagation-set-max_iter;		sl-AffinityPropagation-set-max_iter(c,p); c,p,t; ; OptionsFor_AffinityPropagation_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-AffinityPropagation-set-verbose;		sl-AffinityPropagation-set-verbose(c,p); c,p; ; ;  noop()
sl-AffinityPropagation-set-verbose;		sl-AffinityPropagation-set-verbose(c,p); c,p,t; ; OptionsFor_AffinityPropagation_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#-----------#
#   Birch   #
#-----------#

sl_Birch;			slCreate_classifier_clustering(c); c,p; ; ; de.upb.crc901.mlplan.services.MLPipelinePlan:setClassifier(c,'sklearn.cluster.Birch',p)	->	sl-Birch-set-branching_factor(c,p)	->	sl-Birch-set-compute_labels(c,p)	->	sl-Birch-set-copy(c,p)	->	sl-Birch-set-n_clusters(c,p)	->	sl-Birch-set-threshold(c,p)


#----------------------------------------#
#     Option Configuration for Birch     #
#----------------------------------------#

sl-Birch-set-branching_factor;		sl-Birch-set-branching_factor(c,p); c,p; ; ;  noop()
sl-Birch-set-branching_factor;		sl-Birch-set-branching_factor(c,p); c,p,t; ; OptionsFor_Birch_branching_factor(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-branching_factor', t)
sl-Birch-set-compute_labels;		sl-Birch-set-compute_labels(c,p); c,p; ; ;  noop()
sl-Birch-set-compute_labels;		sl-Birch-set-compute_labels(c,p); c,p,t; ; OptionsFor_Birch_compute_labels(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-compute_labels', t)
sl-Birch-set-copy;		sl-Birch-set-copy(c,p); c,p; ; ;  noop()
sl-Birch-set-copy;		sl-Birch-set-copy(c,p); c,p,t; ; OptionsFor_Birch_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-Birch-set-n_clusters;		sl-Birch-set-n_clusters(c,p); c,p; ; ;  noop()
sl-Birch-set-n_clusters;		sl-Birch-set-n_clusters(c,p); c,p,t; ; OptionsFor_Birch_n_clusters(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_clusters', t)
sl-Birch-set-threshold;		sl-Birch-set-threshold(c,p); c,p; ; ;  noop()
sl-Birch-set-threshold;		sl-Birch-set-threshold(c,p); c,p,t; ; OptionsFor_Birch_threshold(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-threshold', t)


#------------#
#   KMeans   #
#------------#

sl_KMeans;			slCreate_classifier_clustering(c); c,p; ; ; de.upb.crc901.mlplan.services.MLPipelinePlan:setClassifier(c,'sklearn.cluster.KMeans',p)	->	sl-KMeans-set-algorithm(c,p)	->	sl-KMeans-set-copy_x(c,p)	->	sl-KMeans-set-init(c,p)	->	sl-KMeans-set-max_iter(c,p)	->	sl-KMeans-set-n_clusters(c,p)	->	sl-KMeans-set-n_init(c,p)	->	sl-KMeans-set-n_jobs(c,p)	->	sl-KMeans-set-precompute_distances(c,p)	->	sl-KMeans-set-tol(c,p)	->	sl-KMeans-set-verbose(c,p)


#-----------------------------------------#
#     Option Configuration for KMeans     #
#-----------------------------------------#

sl-KMeans-set-algorithm;		sl-KMeans-set-algorithm(c,p); c,p; ; ;  noop()
sl-KMeans-set-algorithm;		sl-KMeans-set-algorithm(c,p); c,p,t; ; OptionsFor_KMeans_algorithm(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-algorithm', t)
sl-KMeans-set-copy_x;		sl-KMeans-set-copy_x(c,p); c,p; ; ;  noop()
sl-KMeans-set-copy_x;		sl-KMeans-set-copy_x(c,p); c,p,t; ; OptionsFor_KMeans_copy_x(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy_x', t)
sl-KMeans-set-init;		sl-KMeans-set-init(c,p); c,p; ; ;  noop()
sl-KMeans-set-init;		sl-KMeans-set-init(c,p); c,p,t; ; OptionsFor_KMeans_init(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-init', t)
sl-KMeans-set-max_iter;		sl-KMeans-set-max_iter(c,p); c,p; ; ;  noop()
sl-KMeans-set-max_iter;		sl-KMeans-set-max_iter(c,p); c,p,t; ; OptionsFor_KMeans_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-KMeans-set-n_clusters;		sl-KMeans-set-n_clusters(c,p); c,p; ; ;  noop()
sl-KMeans-set-n_clusters;		sl-KMeans-set-n_clusters(c,p); c,p,t; ; OptionsFor_KMeans_n_clusters(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_clusters', t)
sl-KMeans-set-n_init;		sl-KMeans-set-n_init(c,p); c,p; ; ;  noop()
sl-KMeans-set-n_init;		sl-KMeans-set-n_init(c,p); c,p,t; ; OptionsFor_KMeans_n_init(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_init', t)
sl-KMeans-set-n_jobs;		sl-KMeans-set-n_jobs(c,p); c,p; ; ;  noop()
sl-KMeans-set-n_jobs;		sl-KMeans-set-n_jobs(c,p); c,p,t; ; OptionsFor_KMeans_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-KMeans-set-precompute_distances;		sl-KMeans-set-precompute_distances(c,p); c,p; ; ;  noop()
sl-KMeans-set-precompute_distances;		sl-KMeans-set-precompute_distances(c,p); c,p,t; ; OptionsFor_KMeans_precompute_distances(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-precompute_distances', t)
sl-KMeans-set-tol;		sl-KMeans-set-tol(c,p); c,p; ; ;  noop()
sl-KMeans-set-tol;		sl-KMeans-set-tol(c,p); c,p,t; ; OptionsFor_KMeans_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-KMeans-set-verbose;		sl-KMeans-set-verbose(c,p); c,p; ; ;  noop()
sl-KMeans-set-verbose;		sl-KMeans-set-verbose(c,p); c,p,t; ; OptionsFor_KMeans_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#---------------#
#   MeanShift   #
#---------------#

sl_MeanShift;			slCreate_classifier_clustering(c); c,p; ; ; de.upb.crc901.mlplan.services.MLPipelinePlan:setClassifier(c,'sklearn.cluster.MeanShift',p)	->	sl-MeanShift-set-bin_seeding(c,p)	->	sl-MeanShift-set-cluster_all(c,p)	->	sl-MeanShift-set-min_bin_freq(c,p)	->	sl-MeanShift-set-n_jobs(c,p)


#--------------------------------------------#
#     Option Configuration for MeanShift     #
#--------------------------------------------#

sl-MeanShift-set-bin_seeding;		sl-MeanShift-set-bin_seeding(c,p); c,p; ; ;  noop()
sl-MeanShift-set-bin_seeding;		sl-MeanShift-set-bin_seeding(c,p); c,p,t; ; OptionsFor_MeanShift_bin_seeding(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-bin_seeding', t)
sl-MeanShift-set-cluster_all;		sl-MeanShift-set-cluster_all(c,p); c,p; ; ;  noop()
sl-MeanShift-set-cluster_all;		sl-MeanShift-set-cluster_all(c,p); c,p,t; ; OptionsFor_MeanShift_cluster_all(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-cluster_all', t)
sl-MeanShift-set-min_bin_freq;		sl-MeanShift-set-min_bin_freq(c,p); c,p; ; ;  noop()
sl-MeanShift-set-min_bin_freq;		sl-MeanShift-set-min_bin_freq(c,p); c,p,t; ; OptionsFor_MeanShift_min_bin_freq(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-min_bin_freq', t)
sl-MeanShift-set-n_jobs;		sl-MeanShift-set-n_jobs(c,p); c,p; ; ;  noop()
sl-MeanShift-set-n_jobs;		sl-MeanShift-set-n_jobs(c,p); c,p,t; ; OptionsFor_MeanShift_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)


#---------------------#
#   MiniBatchKMeans   #
#---------------------#

sl_MiniBatchKMeans;			slCreate_classifier_clustering(c); c,p; ; ; de.upb.crc901.mlplan.services.MLPipelinePlan:setClassifier(c,'sklearn.cluster.MiniBatchKMeans',p)	->	sl-MiniBatchKMeans-set-batch_size(c,p)	->	sl-MiniBatchKMeans-set-compute_labels(c,p)	->	sl-MiniBatchKMeans-set-init(c,p)	->	sl-MiniBatchKMeans-set-max_iter(c,p)	->	sl-MiniBatchKMeans-set-max_no_improvement(c,p)	->	sl-MiniBatchKMeans-set-n_clusters(c,p)	->	sl-MiniBatchKMeans-set-n_init(c,p)	->	sl-MiniBatchKMeans-set-reassignment_ratio(c,p)	->	sl-MiniBatchKMeans-set-tol(c,p)	->	sl-MiniBatchKMeans-set-verbose(c,p)


#--------------------------------------------------#
#     Option Configuration for MiniBatchKMeans     #
#--------------------------------------------------#

sl-MiniBatchKMeans-set-batch_size;		sl-MiniBatchKMeans-set-batch_size(c,p); c,p; ; ;  noop()
sl-MiniBatchKMeans-set-batch_size;		sl-MiniBatchKMeans-set-batch_size(c,p); c,p,t; ; OptionsFor_MiniBatchKMeans_batch_size(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-batch_size', t)
sl-MiniBatchKMeans-set-compute_labels;		sl-MiniBatchKMeans-set-compute_labels(c,p); c,p; ; ;  noop()
sl-MiniBatchKMeans-set-compute_labels;		sl-MiniBatchKMeans-set-compute_labels(c,p); c,p,t; ; OptionsFor_MiniBatchKMeans_compute_labels(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-compute_labels', t)
sl-MiniBatchKMeans-set-init;		sl-MiniBatchKMeans-set-init(c,p); c,p; ; ;  noop()
sl-MiniBatchKMeans-set-init;		sl-MiniBatchKMeans-set-init(c,p); c,p,t; ; OptionsFor_MiniBatchKMeans_init(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-init', t)
sl-MiniBatchKMeans-set-max_iter;		sl-MiniBatchKMeans-set-max_iter(c,p); c,p; ; ;  noop()
sl-MiniBatchKMeans-set-max_iter;		sl-MiniBatchKMeans-set-max_iter(c,p); c,p,t; ; OptionsFor_MiniBatchKMeans_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-MiniBatchKMeans-set-max_no_improvement;		sl-MiniBatchKMeans-set-max_no_improvement(c,p); c,p; ; ;  noop()
sl-MiniBatchKMeans-set-max_no_improvement;		sl-MiniBatchKMeans-set-max_no_improvement(c,p); c,p,t; ; OptionsFor_MiniBatchKMeans_max_no_improvement(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_no_improvement', t)
sl-MiniBatchKMeans-set-n_clusters;		sl-MiniBatchKMeans-set-n_clusters(c,p); c,p; ; ;  noop()
sl-MiniBatchKMeans-set-n_clusters;		sl-MiniBatchKMeans-set-n_clusters(c,p); c,p,t; ; OptionsFor_MiniBatchKMeans_n_clusters(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_clusters', t)
sl-MiniBatchKMeans-set-n_init;		sl-MiniBatchKMeans-set-n_init(c,p); c,p; ; ;  noop()
sl-MiniBatchKMeans-set-n_init;		sl-MiniBatchKMeans-set-n_init(c,p); c,p,t; ; OptionsFor_MiniBatchKMeans_n_init(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_init', t)
sl-MiniBatchKMeans-set-reassignment_ratio;		sl-MiniBatchKMeans-set-reassignment_ratio(c,p); c,p; ; ;  noop()
sl-MiniBatchKMeans-set-reassignment_ratio;		sl-MiniBatchKMeans-set-reassignment_ratio(c,p); c,p,t; ; OptionsFor_MiniBatchKMeans_reassignment_ratio(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-reassignment_ratio', t)
sl-MiniBatchKMeans-set-tol;		sl-MiniBatchKMeans-set-tol(c,p); c,p; ; ;  noop()
sl-MiniBatchKMeans-set-tol;		sl-MiniBatchKMeans-set-tol(c,p); c,p,t; ; OptionsFor_MiniBatchKMeans_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-MiniBatchKMeans-set-verbose;		sl-MiniBatchKMeans-set-verbose(c,p); c,p; ; ;  noop()
sl-MiniBatchKMeans-set-verbose;		sl-MiniBatchKMeans-set-verbose(c,p); c,p,t; ; OptionsFor_MiniBatchKMeans_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#---------------------#
#   NearestCentroid   #
#---------------------#

sl_NearestCentroid;			slCreate_classifier_clustering(c); c,p; ; ; de.upb.crc901.mlplan.services.MLPipelinePlan:setClassifier(c,'sklearn.neighbors.NearestCentroid',p)	->	sl-NearestCentroid-set-metric(c,p)


#--------------------------------------------------#
#     Option Configuration for NearestCentroid     #
#--------------------------------------------------#

sl-NearestCentroid-set-metric;		sl-NearestCentroid-set-metric(c,p); c,p; ; ;  noop()
sl-NearestCentroid-set-metric;		sl-NearestCentroid-set-metric(c,p); c,p,t; ; OptionsFor_NearestCentroid_metric(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-metric', t)
