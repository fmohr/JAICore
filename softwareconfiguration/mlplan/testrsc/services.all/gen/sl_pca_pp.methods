#--------------------#
#   IncrementalPCA   #
#--------------------#

sl_IncrementalPCA;			slChoose_pp_pca(config); config; ; ; associateWithAssertion('sklearn.decomposition.IncrementalPCA',config)
sl_IncrementalPCA;			slConfigure_pp_pca(config); config,pipe; associated('sklearn.decomposition.IncrementalPCA',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.decomposition.IncrementalPCA',pipe)	->	sl-IncrementalPCA-set-copy(config,pipe)	->	sl-IncrementalPCA-set-whiten(config,pipe)


#-------------------------------------------------#
#     Option Configuration for IncrementalPCA     #
#-------------------------------------------------#

sl-IncrementalPCA-set-copy;		sl-IncrementalPCA-set-copy(c,p); c,p; ; ;  noop()
sl-IncrementalPCA-set-copy;		sl-IncrementalPCA-set-copy(c,p); c,p,t; ; OptionsFor_IncrementalPCA_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-IncrementalPCA-set-whiten;		sl-IncrementalPCA-set-whiten(c,p); c,p; ; ;  noop()
sl-IncrementalPCA-set-whiten;		sl-IncrementalPCA-set-whiten(c,p); c,p,t; ; OptionsFor_IncrementalPCA_whiten(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-whiten', t)


#---------------#
#   KernelPCA   #
#---------------#

sl_KernelPCA;			slChoose_pp_pca(config); config; ; ; associateWithAssertion('sklearn.decomposition.KernelPCA',config)
sl_KernelPCA;			slConfigure_pp_pca(config); config,pipe; associated('sklearn.decomposition.KernelPCA',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.decomposition.KernelPCA',pipe)	->	sl-KernelPCA-set-alpha(config,pipe)	->	sl-KernelPCA-set-coef0(config,pipe)	->	sl-KernelPCA-set-copy_X(config,pipe)	->	sl-KernelPCA-set-degree(config,pipe)	->	sl-KernelPCA-set-eigen_solver(config,pipe)	->	sl-KernelPCA-set-fit_inverse_transform(config,pipe)	->	sl-KernelPCA-set-kernel(config,pipe)	->	sl-KernelPCA-set-n_jobs(config,pipe)	->	sl-KernelPCA-set-remove_zero_eig(config,pipe)	->	sl-KernelPCA-set-tol(config,pipe)


#--------------------------------------------#
#     Option Configuration for KernelPCA     #
#--------------------------------------------#

sl-KernelPCA-set-alpha;		sl-KernelPCA-set-alpha(c,p); c,p; ; ;  noop()
sl-KernelPCA-set-alpha;		sl-KernelPCA-set-alpha(c,p); c,p,t; ; OptionsFor_KernelPCA_alpha(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-KernelPCA-set-coef0;		sl-KernelPCA-set-coef0(c,p); c,p; ; ;  noop()
sl-KernelPCA-set-coef0;		sl-KernelPCA-set-coef0(c,p); c,p,t; ; OptionsFor_KernelPCA_coef0(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-coef0', t)
sl-KernelPCA-set-copy_X;		sl-KernelPCA-set-copy_X(c,p); c,p; ; ;  noop()
sl-KernelPCA-set-copy_X;		sl-KernelPCA-set-copy_X(c,p); c,p,t; ; OptionsFor_KernelPCA_copy_X(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy_X', t)
sl-KernelPCA-set-degree;		sl-KernelPCA-set-degree(c,p); c,p; ; ;  noop()
sl-KernelPCA-set-degree;		sl-KernelPCA-set-degree(c,p); c,p,t; ; OptionsFor_KernelPCA_degree(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-degree', t)
sl-KernelPCA-set-eigen_solver;		sl-KernelPCA-set-eigen_solver(c,p); c,p; ; ;  noop()
sl-KernelPCA-set-eigen_solver;		sl-KernelPCA-set-eigen_solver(c,p); c,p,t; ; OptionsFor_KernelPCA_eigen_solver(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-eigen_solver', t)
sl-KernelPCA-set-fit_inverse_transform;		sl-KernelPCA-set-fit_inverse_transform(c,p); c,p; ; ;  noop()
sl-KernelPCA-set-fit_inverse_transform;		sl-KernelPCA-set-fit_inverse_transform(c,p); c,p,t; ; OptionsFor_KernelPCA_fit_inverse_transform(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-fit_inverse_transform', t)
sl-KernelPCA-set-kernel;		sl-KernelPCA-set-kernel(c,p); c,p; ; ;  noop()
sl-KernelPCA-set-kernel;		sl-KernelPCA-set-kernel(c,p); c,p,t; ; OptionsFor_KernelPCA_kernel(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-kernel', t)
sl-KernelPCA-set-n_jobs;		sl-KernelPCA-set-n_jobs(c,p); c,p; ; ;  noop()
sl-KernelPCA-set-n_jobs;		sl-KernelPCA-set-n_jobs(c,p); c,p,t; ; OptionsFor_KernelPCA_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-KernelPCA-set-remove_zero_eig;		sl-KernelPCA-set-remove_zero_eig(c,p); c,p; ; ;  noop()
sl-KernelPCA-set-remove_zero_eig;		sl-KernelPCA-set-remove_zero_eig(c,p); c,p,t; ; OptionsFor_KernelPCA_remove_zero_eig(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-remove_zero_eig', t)
sl-KernelPCA-set-tol;		sl-KernelPCA-set-tol(c,p); c,p; ; ;  noop()
sl-KernelPCA-set-tol;		sl-KernelPCA-set-tol(c,p); c,p,t; ; OptionsFor_KernelPCA_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)


#------------------------#
#   MiniBatchSparsePCA   #
#------------------------#

sl_MiniBatchSparsePCA;			slChoose_pp_pca(config); config; ; ; associateWithAssertion('sklearn.decomposition.MiniBatchSparsePCA',config)
sl_MiniBatchSparsePCA;			slConfigure_pp_pca(config); config,pipe; associated('sklearn.decomposition.MiniBatchSparsePCA',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.decomposition.MiniBatchSparsePCA',pipe)	->	sl-MiniBatchSparsePCA-set-alpha(config,pipe)	->	sl-MiniBatchSparsePCA-set-batch_size(config,pipe)	->	sl-MiniBatchSparsePCA-set-method(config,pipe)	->	sl-MiniBatchSparsePCA-set-n_iter(config,pipe)	->	sl-MiniBatchSparsePCA-set-n_jobs(config,pipe)	->	sl-MiniBatchSparsePCA-set-ridge_alpha(config,pipe)	->	sl-MiniBatchSparsePCA-set-shuffle(config,pipe)	->	sl-MiniBatchSparsePCA-set-verbose(config,pipe)


#-----------------------------------------------------#
#     Option Configuration for MiniBatchSparsePCA     #
#-----------------------------------------------------#

sl-MiniBatchSparsePCA-set-alpha;		sl-MiniBatchSparsePCA-set-alpha(c,p); c,p; ; ;  noop()
sl-MiniBatchSparsePCA-set-alpha;		sl-MiniBatchSparsePCA-set-alpha(c,p); c,p,t; ; OptionsFor_MiniBatchSparsePCA_alpha(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-MiniBatchSparsePCA-set-batch_size;		sl-MiniBatchSparsePCA-set-batch_size(c,p); c,p; ; ;  noop()
sl-MiniBatchSparsePCA-set-batch_size;		sl-MiniBatchSparsePCA-set-batch_size(c,p); c,p,t; ; OptionsFor_MiniBatchSparsePCA_batch_size(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-batch_size', t)
sl-MiniBatchSparsePCA-set-method;		sl-MiniBatchSparsePCA-set-method(c,p); c,p; ; ;  noop()
sl-MiniBatchSparsePCA-set-method;		sl-MiniBatchSparsePCA-set-method(c,p); c,p,t; ; OptionsFor_MiniBatchSparsePCA_method(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-method', t)
sl-MiniBatchSparsePCA-set-n_iter;		sl-MiniBatchSparsePCA-set-n_iter(c,p); c,p; ; ;  noop()
sl-MiniBatchSparsePCA-set-n_iter;		sl-MiniBatchSparsePCA-set-n_iter(c,p); c,p,t; ; OptionsFor_MiniBatchSparsePCA_n_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_iter', t)
sl-MiniBatchSparsePCA-set-n_jobs;		sl-MiniBatchSparsePCA-set-n_jobs(c,p); c,p; ; ;  noop()
sl-MiniBatchSparsePCA-set-n_jobs;		sl-MiniBatchSparsePCA-set-n_jobs(c,p); c,p,t; ; OptionsFor_MiniBatchSparsePCA_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-MiniBatchSparsePCA-set-ridge_alpha;		sl-MiniBatchSparsePCA-set-ridge_alpha(c,p); c,p; ; ;  noop()
sl-MiniBatchSparsePCA-set-ridge_alpha;		sl-MiniBatchSparsePCA-set-ridge_alpha(c,p); c,p,t; ; OptionsFor_MiniBatchSparsePCA_ridge_alpha(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-ridge_alpha', t)
sl-MiniBatchSparsePCA-set-shuffle;		sl-MiniBatchSparsePCA-set-shuffle(c,p); c,p; ; ;  noop()
sl-MiniBatchSparsePCA-set-shuffle;		sl-MiniBatchSparsePCA-set-shuffle(c,p); c,p,t; ; OptionsFor_MiniBatchSparsePCA_shuffle(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-shuffle', t)
sl-MiniBatchSparsePCA-set-verbose;		sl-MiniBatchSparsePCA-set-verbose(c,p); c,p; ; ;  noop()
sl-MiniBatchSparsePCA-set-verbose;		sl-MiniBatchSparsePCA-set-verbose(c,p); c,p,t; ; OptionsFor_MiniBatchSparsePCA_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)


#---------#
#   PCA   #
#---------#

sl_PCA;			slChoose_pp_pca(config); config; ; ; associateWithAssertion('sklearn.decomposition.PCA',config)
sl_PCA;			slConfigure_pp_pca(config); config,pipe; associated('sklearn.decomposition.PCA',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.decomposition.PCA',pipe)	->	sl-PCA-set-copy(config,pipe)	->	sl-PCA-set-iterated_power(config,pipe)	->	sl-PCA-set-svd_solver(config,pipe)	->	sl-PCA-set-tol(config,pipe)	->	sl-PCA-set-whiten(config,pipe)


#--------------------------------------#
#     Option Configuration for PCA     #
#--------------------------------------#

sl-PCA-set-copy;		sl-PCA-set-copy(c,p); c,p; ; ;  noop()
sl-PCA-set-copy;		sl-PCA-set-copy(c,p); c,p,t; ; OptionsFor_PCA_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-PCA-set-iterated_power;		sl-PCA-set-iterated_power(c,p); c,p; ; ;  noop()
sl-PCA-set-iterated_power;		sl-PCA-set-iterated_power(c,p); c,p,t; ; OptionsFor_PCA_iterated_power(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-iterated_power', t)
sl-PCA-set-svd_solver;		sl-PCA-set-svd_solver(c,p); c,p; ; ;  noop()
sl-PCA-set-svd_solver;		sl-PCA-set-svd_solver(c,p); c,p,t; ; OptionsFor_PCA_svd_solver(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-svd_solver', t)
sl-PCA-set-tol;		sl-PCA-set-tol(c,p); c,p; ; ;  noop()
sl-PCA-set-tol;		sl-PCA-set-tol(c,p); c,p,t; ; OptionsFor_PCA_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-PCA-set-whiten;		sl-PCA-set-whiten(c,p); c,p; ; ;  noop()
sl-PCA-set-whiten;		sl-PCA-set-whiten(c,p); c,p,t; ; OptionsFor_PCA_whiten(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-whiten', t)


#-------------------#
#   RandomizedPCA   #
#-------------------#

sl_RandomizedPCA;			slChoose_pp_pca(config); config; ; ; associateWithAssertion('sklearn.decomposition.RandomizedPCA',config)
sl_RandomizedPCA;			slConfigure_pp_pca(config); config,pipe; associated('sklearn.decomposition.RandomizedPCA',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.decomposition.RandomizedPCA',pipe)	->	sl-RandomizedPCA-set-copy(config,pipe)	->	sl-RandomizedPCA-set-iterated_power(config,pipe)	->	sl-RandomizedPCA-set-whiten(config,pipe)


#------------------------------------------------#
#     Option Configuration for RandomizedPCA     #
#------------------------------------------------#

sl-RandomizedPCA-set-copy;		sl-RandomizedPCA-set-copy(c,p); c,p; ; ;  noop()
sl-RandomizedPCA-set-copy;		sl-RandomizedPCA-set-copy(c,p); c,p,t; ; OptionsFor_RandomizedPCA_copy(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-copy', t)
sl-RandomizedPCA-set-iterated_power;		sl-RandomizedPCA-set-iterated_power(c,p); c,p; ; ;  noop()
sl-RandomizedPCA-set-iterated_power;		sl-RandomizedPCA-set-iterated_power(c,p); c,p,t; ; OptionsFor_RandomizedPCA_iterated_power(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-iterated_power', t)
sl-RandomizedPCA-set-whiten;		sl-RandomizedPCA-set-whiten(c,p); c,p; ; ;  noop()
sl-RandomizedPCA-set-whiten;		sl-RandomizedPCA-set-whiten(c,p); c,p,t; ; OptionsFor_RandomizedPCA_whiten(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-whiten', t)


#---------------#
#   SparsePCA   #
#---------------#

sl_SparsePCA;			slChoose_pp_pca(config); config; ; ; associateWithAssertion('sklearn.decomposition.SparsePCA',config)
sl_SparsePCA;			slConfigure_pp_pca(config); config,pipe; associated('sklearn.decomposition.SparsePCA',config); ; de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection(config,'sklearn.decomposition.SparsePCA',pipe)	->	sl-SparsePCA-set-alpha(config,pipe)	->	sl-SparsePCA-set-max_iter(config,pipe)	->	sl-SparsePCA-set-method(config,pipe)	->	sl-SparsePCA-set-n_jobs(config,pipe)	->	sl-SparsePCA-set-ridge_alpha(config,pipe)	->	sl-SparsePCA-set-tol(config,pipe)	->	sl-SparsePCA-set-verbose(config,pipe)


#--------------------------------------------#
#     Option Configuration for SparsePCA     #
#--------------------------------------------#

sl-SparsePCA-set-alpha;		sl-SparsePCA-set-alpha(c,p); c,p; ; ;  noop()
sl-SparsePCA-set-alpha;		sl-SparsePCA-set-alpha(c,p); c,p,t; ; OptionsFor_SparsePCA_alpha(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-alpha', t)
sl-SparsePCA-set-max_iter;		sl-SparsePCA-set-max_iter(c,p); c,p; ; ;  noop()
sl-SparsePCA-set-max_iter;		sl-SparsePCA-set-max_iter(c,p); c,p,t; ; OptionsFor_SparsePCA_max_iter(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_iter', t)
sl-SparsePCA-set-method;		sl-SparsePCA-set-method(c,p); c,p; ; ;  noop()
sl-SparsePCA-set-method;		sl-SparsePCA-set-method(c,p); c,p,t; ; OptionsFor_SparsePCA_method(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-method', t)
sl-SparsePCA-set-n_jobs;		sl-SparsePCA-set-n_jobs(c,p); c,p; ; ;  noop()
sl-SparsePCA-set-n_jobs;		sl-SparsePCA-set-n_jobs(c,p); c,p,t; ; OptionsFor_SparsePCA_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-SparsePCA-set-ridge_alpha;		sl-SparsePCA-set-ridge_alpha(c,p); c,p; ; ;  noop()
sl-SparsePCA-set-ridge_alpha;		sl-SparsePCA-set-ridge_alpha(c,p); c,p,t; ; OptionsFor_SparsePCA_ridge_alpha(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-ridge_alpha', t)
sl-SparsePCA-set-tol;		sl-SparsePCA-set-tol(c,p); c,p; ; ;  noop()
sl-SparsePCA-set-tol;		sl-SparsePCA-set-tol(c,p); c,p,t; ; OptionsFor_SparsePCA_tol(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-tol', t)
sl-SparsePCA-set-verbose;		sl-SparsePCA-set-verbose(c,p); c,p; ; ;  noop()
sl-SparsePCA-set-verbose;		sl-SparsePCA-set-verbose(c,p); c,p,t; ; OptionsFor_SparsePCA_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)
