### FEATURE PREPROCESSORS ###

selectSubsetWekaPreprocessing;	chooseFeaturePreprocessor(config); config; ; ; wekaChooseSubsetSearcher(config) -> wekaChooseSubsetEvaluator(config)
selectRankingWekaPreprocessing; chooseFeaturePreprocessor(config); config; ; ; wekaChooseRankingSearcher(config) -> wekaChooseRankingEvaluator(config)
configureWekaPreprocessing; configureFeaturePreprocessor(config); config,fs,fe; ; ; configureWekaSearcher(config,fs) -> configureWekaEvaluator(config,fe) -> de.upb.crc901.mlplan.services.MLPipelinePlan:addWekaAttributeSelection(config, fs, fe) 


### FEATURE SELECTION SEARCHER ###
# Best First
wekaBF;	wekaChooseSubsetSearcher(config); config; ; ; associateWithAssertion('weka.attributeSelection.BestFirst',config)
wekaBF;	configureWekaSearcher(config, fs); config,fs,oList,oArray; associated('weka.attributeSelection.BestFirst',config) ; ; weka.attributeSelection.BestFirst:__construct(fs) -> getOptionList(oList) -> getWekaBFConfig0(oList) -> compileOptionListToArray(oList,oArray) -> weka.attributeSelection.BestFirst:setOptions(fs,oArray)
# wekaBF;	wekaParametrizeFeatureSubsetSearch(fsn,fs); fsn,fs,oList,oArray; ; ; weka.attributeSelection.BestFirst:__construct(fs) -> assignTo('weka.attributeSelection.BestFirst',fsn) -> getOptionList(oList) -> getWekaBFConfig0(oList) -> compileOptionListToArray(oList,oArray) -> weka.attributeSelection.BestFirst:setOptions(fs,oArray)
# -D <int> mandatory
wekaBFOptsDirection			; getWekaBFConfig0(o);	o,int; BFDirection(int) ; ; addMandatValuedParam(o, '-D', int) -> getWekaBFConfig1(o)
# -N <int> mandatory
wekaBFOptsSearchTermination	; getWekaBFConfig1(o);	o,int; BFSearchTermination(int) ; ; addMandatValuedParam(o, '-N', int) -> getWekaBFConfig2(o)
# -S 1 mandatory (was 0, but 1 makes more sense)
wekaBFOptsLookupCacheSize	; getWekaBFConfig2(o);	o,int; ; ; addMandatValuedParam(o, '-S', '1')

# Greedy Stepwise
wekaGS;	wekaChooseSubsetSearcher(config); config; ; ; associateWithAssertion('weka.attributeSelection.GreedyStepwise',config)
wekaGS;	configureWekaSearcher(config, fs); config,fs,oList,oArray; associated('weka.attributeSelection.GreedyStepwise',config) ; ; weka.attributeSelection.GreedyStepwise:__construct(fs) -> getOptionList(oList) -> getWekaGSConfig0(oList) -> compileOptionListToArray(oList,oArray) -> weka.attributeSelection.GreedyStepwise:setOptions(fs,oArray)
# wekaGS;	wekaParametrizeFeatureSubsetSearch(fsn,fs); fsn,fs,oList,oArray; ; ; weka.attributeSelection.GreedyStepwise:__construct(fs) -> assignTo('weka.attributeSelection.GreedyStepwise',fsn) -> getOptionList(oList) -> getWekaGSConfig0(oList) -> compileOptionListToArray(oList,oArray) -> weka.attributeSelection.GreedyStepwise:setOptions(fs,oArray)
# -C, -B, -R optional
wekaGSOptsConservForwSel	; getWekaGSConfig0(o);	o,int; ; ; addOptParam(o, '-C') -> getWekaGSConfig1(o)
wekaGSOptsSearchBackwards	; getWekaGSConfig1(o);	o,int; ; ; addOptParam(o, '-B') -> getWekaGSConfig2(o)
wekaGSOptsGenerateRanking	; getWekaGSConfig2(o);	o,int; ; ; addOptParam(o, '-R') -> getWekaGSConfig3(o)
# -N <int> mandatory, only if -R not used
wekaGSOptsSearchTermination	; getWekaGSConfig3(o);	o,int;  notin(o,'-R') & GSNumToSelect(int) ; ; addMandatValuedParam(o, '-N', int)
# -T <float> mandatory, only if -R used
wekaGSOptsThreshold			; getWekaGSConfig3(o);	o,float;  in(o,'-R') & GSThreshold(float) ; ; addMandatValuedParam(o, '-T', float)

# Ranker
wekaRank;	wekaChooseRankingSearcher(config); config; ; ; associateWithAssertion('weka.attributeSelection.Ranker',config)
wekaRank;	configureWekaSearcher(config,fs); config,fs,oList,oArray; associated('weka.attributeSelection.Ranker',config) ; ; weka.attributeSelection.Ranker:__construct(fs) -> getOptionList(oList) -> getWekaRankConfig0(oList) -> compileOptionListToArray(oList,oArray) -> weka.attributeSelection.Ranker:setOptions(fs,oArray)
# wekaRank;	wekaParametrizeFeatureRankingSearch(fsn,fs); fsn,fs,oList,oArray; ; ; weka.attributeSelection.Ranker:__construct(fs) -> assignTo('weka.attributeSelection.Ranker',fsn) -> getOptionList(oList) -> getWekaRankConfig0(oList) -> compileOptionListToArray(oList,oArray) -> weka.attributeSelection.Ranker:setOptions(fs,oArray)
# -T <float> mandatory
wekaRankOptsThreshold			; getWekaRankConfig0(o);	o,float;  RankThreshold(float) ; ; addMandatValuedParam(o, '-T', float)


### FEATURE SELECTION EVALUATORS ###

# Correlation-based Feature Subset Selection
wekaCfsSubsetEval;	wekaChooseSubsetEvaluator(config); config; ; ; associateWithAssertion('weka.attributeSelection.CfsSubsetEval',config)
wekaCfsSubsetEval;	configureWekaEvaluator(config,fe); config,fe,oList,oArray; associated('weka.attributeSelection.CfsSubsetEval',config) ; ;  weka.attributeSelection.CfsSubsetEval:__construct(fe) -> getOptionList(oList) -> getWekaCfsSubsetEvalConfig0(oList) -> compileOptionListToArray(oList,oArray) -> weka.attributeSelection.CfsSubsetEval:setOptions(fe,oArray)
# -M, -L optional
wekaCfsSubsetEvalOptsMissingSeparate	; getWekaCfsSubsetEvalConfig0(o);	o; ; ; addOptParam(o, '-M') -> getWekaCfsSubsetEvalConfig1(o)
wekaCfsSubsetEvalOptsLocallyPredictive	; getWekaCfsSubsetEvalConfig1(o);	o; ; ; addOptParam(o, '-L')

# Correlation Attribute Evaluation
wekaCorrAttrEval;	wekaChooseRankingEvaluator(config); config; ; ; associateWithAssertion('weka.attributeSelection.CorrelationAttributeEval',config)
wekaCorrAttrEval;	configureWekaEvaluator(config,fe); config,fe; associated('weka.attributeSelection.CorrelationAttributeEval',config) ; ;  weka.attributeSelection.CorrelationAttributeEval:__construct(fe)
# No parameter

# Gain Ratio Attribute Evaluation
wekaGainRatioAE;	wekaChooseRankingEvaluator(config); config; ; ; associateWithAssertion('weka.attributeSelection.GainRatioAttributeEval',config)
wekaGainRatioAE;	configureWekaEvaluator(config,fe); config,fe,oList,oArray; associated('weka.attributeSelection.GainRatioAttributeEval',config) ; ;  weka.attributeSelection.GainRatioAttributeEval:__construct(fe)
# No parameter

# Info Gain Attribute Evaluation
wekaInfoGainAE;	wekaChooseRankingEvaluator(config); config; ; ; associateWithAssertion('weka.attributeSelection.InfoGainAttributeEval',config)
wekaInfoGainAE;	configureWekaEvaluator(config,fe); config,fe,oList,oArray; associated('weka.attributeSelection.InfoGainAttributeEval',config) ; ; weka.attributeSelection.InfoGainAttributeEval:__construct(fe) -> getOptionList(oList) -> getWekaInfoGainAEConfig0(oList) -> compileOptionListToArray(oList,oArray) -> weka.attributeSelection.InfoGainAttributeEval:setOptions(fe,oArray)
# -M, -B optional
wekaInfoGainAEOptsMissingMerge				; getWekaInfoGainAEConfig0(o);	o; ; ; addOptParam(o, '-M') -> getWekaInfoGainAEConfig1(o)
wekaInfoGainAEOptsBinarizeNumericAttributes	; getWekaInfoGainAEConfig1(o);	o; ; ; addOptParam(o, '-B')

# OneR Attribute Evaluation
wekaOneRAE;	wekaChooseRankingEvaluator(config); config; ; ; associateWithAssertion('weka.attributeSelection.OneRAttributeEval',config)
wekaOneRAE;	configureWekaEvaluator(config,fe); config,fe,oList,oArray; associated('weka.attributeSelection.OneRAttributeEval',config) ; ;  weka.attributeSelection.OneRAttributeEval:__construct(fe) -> getOptionList(oList) -> getWekaOneRAEConfig0(oList) -> compileOptionListToArray(oList,oArray) -> weka.attributeSelection.OneRAttributeEval:setOptions(fe,oArray)
# -D optional
wekaOneRAEOptsEvalUsingTrainingData	; getWekaOneRAEConfig0(o);	o; ; ; addOptParam(o, '-D') -> getWekaOneRAEConfig1(o)
# -F <int> mandatory
wekaOneRAEOptsFolds					; getWekaOneRAEConfig1(o);	o,int; OneRAEFolds(int) ; ; addMandatValuedParam(o, '-F', int) -> getWekaOneRAEConfig2(o)
# -B <int> mandatory
wekaOneRAEOptsMinimumBucketSize		; getWekaOneRAEConfig2(o);	o,int; OneRAEMinimumBucketSize(int) ; ; addMandatValuedParam(o, '-B', int) -> getWekaOneRAEConfig3(o)
# -S 1 mandatory
wekaOneRAEOptsSeed					; getWekaOneRAEConfig3(o);	o; ; ; addMandatValuedParam(o, '-S', '1')

# Principal Component Analysis
wekaPCA;	wekaChooseRankingEvaluator(config); config; ; ; associateWithAssertion('weka.attributeSelection.PrincipalComponents',config)
wekaPCA;	configureWekaEvaluator(config,fe); config,fe,oList,oArray; associated('weka.attributeSelection.PrincipalComponents',config) ; ; weka.attributeSelection.PrincipalComponents:__construct(fe) -> getOptionList(oList) -> getWekaPCAConfig0(oList) -> compileOptionListToArray(oList,oArray) -> weka.attributeSelection.PrincipalComponents:setOptions(fe,oArray)
# -C, -O optional
wekaPCAOptsCenterData				; getWekaPCAConfig0(o);	o; ; ; addOptParam(o, '-C') -> getWekaPCAConfig1(o)
wekaPCAOptsTransformBackToOriginal	; getWekaPCAConfig1(o);	o; ; ; addOptParam(o, '-O') -> getWekaPCAConfig2(o)
# -R <float> mandatory
wekaPCAOptsVarianceCovered			; getWekaPCAConfig2(o);	o,float; PCAVarianceCovered(float) ; ; addMandatValuedParam(o, '-R', float) -> getWekaPCAConfig3(o)
# -A <int> mandatory
wekaPCAOptsMaximumAttributeNames	; getWekaPCAConfig3(o);	o; ; ; addMandatValuedParam(o, '-A', '-1')
wekaPCAOptsMaximumAttributeNames	; getWekaPCAConfig3(o);	o,int; PCAMaximumAttributeNames(int) ; ; addMandatValuedParam(o, '-A', int)

# ReliefF Attribute Evaluation
wekaReliefF;	wekaChooseRankingEvaluator(config); config; ; ; associateWithAssertion('weka.attributeSelection.ReliefFAttributeEval',config)
wekaReliefF;	configureWekaEvaluator(config,fe); config,fe,oList,oArray; associated('weka.attributeSelection.ReliefFAttributeEval',config) ; ; weka.attributeSelection.ReliefFAttributeEval:__construct(fe) -> getOptionList(oList) -> getWekaReliefFAEConfig0(oList) -> compileOptionListToArray(oList,oArray) -> weka.attributeSelection.ReliefFAttributeEval:setOptions(fe,oArray)
# -W optional
wekaReliefFAEOptsWeightByDistance			; getWekaReliefFAEConfig0(o);	o; ; ; addOptParam(o, '-W') -> getWekaReliefFAEConfig1(o)
# -K <int> mandatory
wekaReliefFAEOptsNumNeighbours	; getWekaReliefFAEConfig1(o);	o,int; ReliefFAENumNeighbours(int) ; ; addMandatValuedParam(o, '-K', int) -> getWekaReliefFAEConfig2(o)
# -A <int> mandatory, only if -W not used
wekaReliefFOptsSigma1	; getWekaReliefFAEConfig2(o);	o; in(o,'-W') ; ;  noop
wekaReliefFOptsSigma2	; getWekaReliefFAEConfig2(o);	o,int; notin(o,'-W') & ReliefFAESigma(int) ; ;  addMandatValuedParam(o, '-A', int)

# Symmetric Uncertainty Attribute Evaluation
wekaSymmUncertAE;	wekaChooseRankingEvaluator(config); config; ; ; associateWithAssertion('weka.attributeSelection.SymmetricalUncertAttributeEval',config)
wekaSymmUncertAE;	configureWekaEvaluator(config,fe); config,fe,oList,oArray; associated('weka.attributeSelection.SymmetricalUncertAttributeEval',config) ; ; weka.attributeSelection.SymmetricalUncertAttributeEval:__construct(fe) -> getOptionList(oList) -> getWekaSymmUncertAEConfig0(oList) -> compileOptionListToArray(oList,oArray) -> weka.attributeSelection.SymmetricalUncertAttributeEval:setOptions(fe,oArray)
# -M optional
wekaSymmUncertAEOptsMissingMerge				; getWekaSymmUncertAEConfig0(o);	o; ; ; addOptParam(o, '-M')












### DATA PREPROCESSORS ###

#wekaPreprocessData; createDataPreprocessor(dn,d); dn,d; ; ; assignTo('noDataPreprocessing',dn)
#wekaNormalize; createDataPreprocessor(dn,d); dn,d; ; ; weka.filters.unsupervised.attribute.Normalize:__construct(d) -> assignTo('weka.filters.unsupervised.attribute.Normalize',dn)
#wekaStandardize; createDataPreprocessor(dn,d); dn,d; ; ; weka.filters.unsupervised.attribute.Standardize:__construct(d) -> assignTo('weka.filters.unsupervised.attribute.Standardize',dn)