#
# Small working subset of
# Knowledge base for Auto-WEKA like classifier construction by HTN planning
#
# For Auto-WEKA see:
# Chris Thornton Frank Hutter Holger H. Hoos Kevin Leyton-Brown
# Auto-WEKA: Combined Selection and Hyperparameter Optimization of Classiï¬�cation Algorithms
# 

[NonFunctionalRequirements]

int Price: +


[Constants]

-1:Number
0.000000000001:Number
0.00000000001:Number
0.0000000001:Number
0.000000001:Number
0.00000001:Number
0.0000001:Number
0.000001:Number
0.00001:Number
0.0001:Number
0.001:Number
0.01:Number
0.0:Number
0.1:Number
0.2:Number
0.3:Number
0.4:Number
0.5:Number
0.55:Number
0.6:Number
0.65:Number
0.7:Number
0.75:Number
0.8:Number
0.85:Number
0.9:Number
0.95:Number
0.99:Number
1.0:Number
1.1:Number
1.2:Number
1.3:Number
1.4:Number
1.5:Number
1.8:Number
2.0:Number
2.5:Number
2.6:Number
3.0:Number
3.4:Number
3.5:Number
4.0:Number
4.2:Number
4.5:Number
5.0:Number
0:Number
1:Number
2:Number
3:Number
4:Number
5:Number
6:Number
7:Number
8:Number
9:Number
10:Number
12:Number
13:Number
14:Number
15:Number
16:Number
18:Number
20:Number
25:Number
30:Number
32:Number
40:Number
50:Number
60:Number
62:Number
64:Number
70:Number
75:Number
80:Number
90:Number
100:Number
120:Number
125:Number
128:Number
150:Number
175:Number
200:Number
256:Number
100:Number
125:Number
250:Number
500:Number
512:Number
1000:Number
1024:Number
5000:Number
10000:Number
20000:Number
50000:Number

null:String

-A:String
-B:String
-C:String
-D:String
-E:String
-F:String
-H:String
-I:String
-J:String
-K:String
-L:String
-M:String
-N:String
-O:String
-P:String
-Q:String
-R:String
-S:String
-U:String
-V:String
-W:String
-depth:String
--:String

localhost:String
192.168.232.131:String
isys-db.cs.upb.de:String
8000:Number


### BASE CLASSIFIERS ###

noFeaturePreprocessing:String

### BASE CLASSIFIERS ###

INCLUDE testrsc/services/weka.constants
#INCLUDE testrsc/services/tf.constants
#INCLUDE testrsc/services/sl.constants


### ENSEMBLE CLASSIFIERS PARAMETER ###

# Voting combinationRule: Option -R
AVG:string
PROD:String
MAJ:String
MIN:String
MAX:String


[Types]

Image;
JPGImage;Image
BMPImage;Image
GIFImage;Image
FeatureVector;
Number;
Value;
Instances;
Filter;
Classes;
Boolean;
Spam;Boolean
Text;Boolean


[Services]

### Helper Services ###
noop;;;;;(0)

inheritInstanceProp	; x:Instances,y:Instances; ; Instances(x) & assigned(x,y) ; Instances(y);(0)

copyNormalizedInstances;x:Thing,y:Thing;;;Instances(y) & normalized(y);(0)
split;	x:Instances; split:List<Instances>; Instances(x); List<Instances>(split); (0)
retrieveTrain;	s:List<Instances>; train:Instances; List<Instances>(s); Instances(train); (0)
retrieveTest;	s:List<Instances>; test:Instances; List<Instances>(s); Instances(test); (0)

assignTo			; s1:String; s2:String; ; assigned(s1,s2); (0)
setNull				; obj; ; ; assigned(obj); (0)
associateWithAssertion	; s1:String; s2:String; ; associated(s1,s2); (0)

getOptionList; 		; o:List<String>; ; List<String>(o); (0)

addOption			; oList:List<String>, o:String,currentMax:String;; List<String>(oList) & !in(oList, o); in(oList, o); (0)
addOptionPair		; oList:List<String>, o:String, v:Value,currentMax:String;; List<String>(oList) & !in(oList, o); in(oList, o) & optVal(oList,o,v); (0)

addSingleParam		; oList:List<String>, p:String; ; List<String>(oList) ; in(oList, p) ; (0)
noaddSingleParam	; oList:List<String>, p:String; ; List<String>(oList) ; notin(oList, p) ; (0)
addValuedParam		; oList:List<String>, p:String, v:Value; ; List<String>(oList) ; in(oList, p) & optVal(oList,p,v); (0)
noaddValuedParam	; oList:List<String>, p:String, v:Value; ; List<String>(oList) ; notin(oList, p) & optVal(oList,p,v); (0)

concatenateWithName	; cn:String, oLocal:List<String>; param:String; List<String>(oLocal); String(param); (0)
concatenate			; oLocal:List<String>; param:String; List<String>(oLocal); String(param); (0)
appendOptions		; l1:List<String>, l2:List<String>; ; List<String>(l1) & List<String>(l2);appended(l1,l2);(0)

compileOptionListToArray; oList:List<String>; oArray:String[]; List<String>(oList); String[](oArray); (0)

INCLUDE testrsc/services/weka.services

de.upb.crc901.mlplan.services.MLPipelinePlan:__construct;;config;;;(0)
de.upb.crc901.mlplan.services.MLPipelinePlan:onHost;c,host,port;;;;(0)
de.upb.crc901.mlplan.services.MLPipelinePlan:addAttributeSelection;c,algorithm;p;;definesPreprocessor(algorithm);(0)
de.upb.crc901.mlplan.services.MLPipelinePlan:setClassifier;c,classifier;p;;definesClassifier(classifier);(0)
de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions;c,p,option,value;;;definesOption(option, value);(0)
de.upb.crc901.mlplan.services.MLPipelinePlan:addWekaAttributeSelection;c,searcher,evaluator;;;definesWekaPreprocessor(c);(0)
de.upb.crc901.mlplan.services.MLServicePipeline:__construct;config;pl;;;(0)


[Methods]

### Helper Methods ###

# optional parameters
addOptionalParameterNo					; addOptParam(o,p);						o,p; ; ; noaddSingleParam(o,p)
addOptionalParameterYes					; addOptParam(o,p);						o,p; ; ; addSingleParam(o,p)
addOptionalValuedParameterNo			; addOptValuedParam(o,p,v);				o,p,v; ; ; noaddValuedParam(o,p,v)
addOptionalValuedParameterYes			; addOptValuedParam(o,p,v);				o,p,v; ; ; addValuedParam(o,p,v)
# p | q in {REMOVE_PREV} (p must be present if q is not)
condAddOptionalParameterNo				; condAddOptParam(o,p,q);				o,p,q; in(o,q) ; ; addOptParam(o,p)
condAddOptionalParameterYes				; condAddOptParam(o,p,q);				o,p,q; notin(o,q) ; ; addSingleParam(o,p)
condAddOptionalValuedParameterNo		; condAddOptValuedParam(o,p,v,q);		o,p,v,q; in(o,q) ; ; addOptValuedParam(o,p,v)
condAddOptionalValuedParameterYes		; condAddOptValuedParam(o,p,v,q);		o,p,v,q; notin(o,q) ; ; addValuedParam(o,p,v)
# p | q in {REMOVED} (p must be present if q is present)
negCondAddOptionalParameterNo			; negCondAddOptParam(o,p,q);			o,p,q; in(o,q) ; ; addSingleParam(o,p)
negCondAddOptionalParameterYes			; negCondAddOptParam(o,p,q);			o,p,q; notin(o,q) ; ; addOptParam(o,p)
negCondAddOptionalValuedParameterNo		; negCondAddOptValuedParam(o,p,v,q);	o,p,v,q; in(o,q) ; ; addValuedParam(o,p,v)
negCondAddOptionalValuedParameterYes	; negCondAddOptValuedParam(o,p,v,q);	o,p,v,q; notin(o,q) ; ; addOptValuedParam(o,p,v)
# mandatory parameters
addMandatoryParameter					; addMandatParam(o,p);					o,p; ; ; addSingleParam(o,p)
addMandatoryValuedParameter				; addMandatValuedParam(o,p,v);			o,p,v; ; ; addValuedParam(o,p,v)


### Main ###
inducePipeline;		induce(x,returnedClassifier);	x,returnedClassifier,config; ; ;         de.upb.crc901.mlplan.services.MLPipelinePlan:__construct(config) -> chooseFeaturePreprocessor(x,config) -> chooseClassifier(x,config) -> configureFeaturePreprocessor(x,config) -> de.upb.crc901.mlplan.services.MLServicePipeline:__construct(config,returnedClassifier)


ignorePreprocessing; chooseFeaturePreprocessor(x,config); x,config; ; ; associateWithAssertion('nopp',config)
ignorePreprocessingConfiguration; configureFeaturePreprocessor(x,config); x,config; associated('nopp',config) ; ; noop()

INCLUDE testrsc/services/weka_pp.methods
INCLUDE testrsc/services/weka_classifiers.methods
INCLUDE testrsc/services/sl_pp.methods
INCLUDE testrsc/services/sl.methods
#INCLUDE testrsc/services/tf.methods

[Rules]

INCLUDE testrsc/services/weka.params

[Queries]

q1;x:Instances;classifier;Instances(x);induce(x,classifier);(1000)

