

#------------------------#
#   AdaBoostClassifier   #
#------------------------#

sl_AdaBoostClassifier;			slCreate_classifier_meta(c); c,p; ; ; de.upb.crc901.mlplan.services.MLPipelinePlan:setClassifier(c,'sklearn.ensemble.AdaBoostClassifier',p)	->	sl-AdaBoostClassifier-set-algorithm(c,p)	->	sl-AdaBoostClassifier-set-learning_rate(c,p)	->	sl-AdaBoostClassifier-set-n_estimators(c,p)


#-----------------------------------------------------#
#     Option Configuration for AdaBoostClassifier     #
#-----------------------------------------------------#

sl-AdaBoostClassifier-set-algorithm;		sl-AdaBoostClassifier-set-algorithm(c,p); c,p; ; ;  noop()
sl-AdaBoostClassifier-set-algorithm;		sl-AdaBoostClassifier-set-algorithm(c,p); c,p,t; ; OptionsFor_AdaBoostClassifier_algorithm(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-algorithm', t)
sl-AdaBoostClassifier-set-learning_rate;		sl-AdaBoostClassifier-set-learning_rate(c,p); c,p; ; ;  noop()
sl-AdaBoostClassifier-set-learning_rate;		sl-AdaBoostClassifier-set-learning_rate(c,p); c,p,t; ; OptionsFor_AdaBoostClassifier_learning_rate(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-learning_rate', t)
sl-AdaBoostClassifier-set-n_estimators;		sl-AdaBoostClassifier-set-n_estimators(c,p); c,p; ; ;  noop()
sl-AdaBoostClassifier-set-n_estimators;		sl-AdaBoostClassifier-set-n_estimators(c,p); c,p,t; ; OptionsFor_AdaBoostClassifier_n_estimators(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_estimators', t)


#-----------------------#
#   BaggingClassifier   #
#-----------------------#

sl_BaggingClassifier;			slCreate_classifier_meta(c); c,p; ; ; de.upb.crc901.mlplan.services.MLPipelinePlan:setClassifier(c,'sklearn.ensemble.BaggingClassifier',p)	->	sl-BaggingClassifier-set-bootstrap(c,p)	->	sl-BaggingClassifier-set-bootstrap_features(c,p)	->	sl-BaggingClassifier-set-max_features(c,p)	->	sl-BaggingClassifier-set-max_samples(c,p)	->	sl-BaggingClassifier-set-n_estimators(c,p)	->	sl-BaggingClassifier-set-n_jobs(c,p)	->	sl-BaggingClassifier-set-oob_score(c,p)	->	sl-BaggingClassifier-set-verbose(c,p)	->	sl-BaggingClassifier-set-warm_start(c,p)


#----------------------------------------------------#
#     Option Configuration for BaggingClassifier     #
#----------------------------------------------------#

sl-BaggingClassifier-set-bootstrap;		sl-BaggingClassifier-set-bootstrap(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-bootstrap;		sl-BaggingClassifier-set-bootstrap(c,p); c,p,t; ; OptionsFor_BaggingClassifier_bootstrap(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-bootstrap', t)
sl-BaggingClassifier-set-bootstrap_features;		sl-BaggingClassifier-set-bootstrap_features(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-bootstrap_features;		sl-BaggingClassifier-set-bootstrap_features(c,p); c,p,t; ; OptionsFor_BaggingClassifier_bootstrap_features(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-bootstrap_features', t)
sl-BaggingClassifier-set-max_features;		sl-BaggingClassifier-set-max_features(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-max_features;		sl-BaggingClassifier-set-max_features(c,p); c,p,t; ; OptionsFor_BaggingClassifier_max_features(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_features', t)
sl-BaggingClassifier-set-max_samples;		sl-BaggingClassifier-set-max_samples(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-max_samples;		sl-BaggingClassifier-set-max_samples(c,p); c,p,t; ; OptionsFor_BaggingClassifier_max_samples(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-max_samples', t)
sl-BaggingClassifier-set-n_estimators;		sl-BaggingClassifier-set-n_estimators(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-n_estimators;		sl-BaggingClassifier-set-n_estimators(c,p); c,p,t; ; OptionsFor_BaggingClassifier_n_estimators(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_estimators', t)
sl-BaggingClassifier-set-n_jobs;		sl-BaggingClassifier-set-n_jobs(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-n_jobs;		sl-BaggingClassifier-set-n_jobs(c,p); c,p,t; ; OptionsFor_BaggingClassifier_n_jobs(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-n_jobs', t)
sl-BaggingClassifier-set-oob_score;		sl-BaggingClassifier-set-oob_score(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-oob_score;		sl-BaggingClassifier-set-oob_score(c,p); c,p,t; ; OptionsFor_BaggingClassifier_oob_score(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-oob_score', t)
sl-BaggingClassifier-set-verbose;		sl-BaggingClassifier-set-verbose(c,p); c,p; ; ;  noop()
sl-BaggingClassifier-set-verbose;		sl-BaggingClassifier-set-verbose(c,p); c,p,t; ; OptionsFor_BaggingClassifier_verbose(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-verbose', t)
sl-BaggingClassifier-set-warm_start;		sl-BaggingClassifier-set-warm_start(c,p); c,p; ; ;  noop()
#sl-BaggingClassifier-set-warm_start;		sl-BaggingClassifier-set-warm_start(c,p); c,p,t; ; OptionsFor_BaggingClassifier_warm_start(t); de.upb.crc901.mlplan.services.MLPipelinePlan:addOptions(c,p,'-warm_start', t)
