// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace LearningCurve_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "examples/LearningCurve/LearningCurve.stan");
    reader.add_event(53, 51, "end", "examples/LearningCurve/LearningCurve.stan");
    return reader;
}

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_log_linear(const T0__& a,
                   const T1__& b,
                   const T2__& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 3;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::log(((a * stan::math::log(x)) + b)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_log_linear_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& a,
                   const T1__& b,
                   const T2__& x, std::ostream* pstream__) const {
        return log_log_linear(a, b, x, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
pow_3(const T0__& c,
          const T1__& a,
          const T2__& alpha,
          const T3__& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>((c - (a * pow(x,-(alpha)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct pow_3_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& c,
          const T1__& a,
          const T2__& alpha,
          const T3__& x, std::ostream* pstream__) const {
        return pow_3(c, a, alpha, x, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type
f_comb(const T0__& w_0,
           const T1__& w_1,
           const T2__& a_0,
           const T3__& b_0,
           const T4__& c_1,
           const T5__& a_1,
           const T6__& alpha_1,
           const T7__& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 11;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((w_0 * log_log_linear(a_0,b_0,x, pstream__)) + (w_1 * pow_3(c_1,a_1,alpha_1,x, pstream__))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct f_comb_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type
    operator()(const T0__& w_0,
           const T1__& w_1,
           const T2__& a_0,
           const T3__& b_0,
           const T4__& c_1,
           const T5__& a_1,
           const T6__& alpha_1,
           const T7__& x, std::ostream* pstream__) const {
        return f_comb(w_0, w_1, a_0, b_0, c_1, a_1, alpha_1, x, pstream__);
    }
};

class LearningCurve_model : public prob_grad {
private:
    int N;
    vector_d x;
    vector_d y;
public:
    LearningCurve_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    LearningCurve_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "LearningCurve_model_namespace::LearningCurve_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 18;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N));
            validate_non_negative_index("x", "N", N);
            x = vector_d(static_cast<Eigen::VectorXd::Index>(N));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_i_vec_lim__ = N;
            for (size_t i_vec__ = 0; i_vec__ < x_i_vec_lim__; ++i_vec__) {
                x[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            validate_non_negative_index("y", "N", N);
            y = vector_d(static_cast<Eigen::VectorXd::Index>(N));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_i_vec_lim__ = N;
            for (size_t i_vec__ = 0; i_vec__ < y_i_vec_lim__; ++i_vec__) {
                y[i_vec__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 17;
            current_statement_begin__ = 18;
            current_statement_begin__ = 19;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 23;
            ++num_params_r__;
            current_statement_begin__ = 24;
            ++num_params_r__;
            current_statement_begin__ = 25;
            ++num_params_r__;
            current_statement_begin__ = 26;
            ++num_params_r__;
            current_statement_begin__ = 27;
            ++num_params_r__;
            current_statement_begin__ = 28;
            ++num_params_r__;
            current_statement_begin__ = 29;
            ++num_params_r__;
            current_statement_begin__ = 31;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~LearningCurve_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("w_0")))
            throw std::runtime_error("variable w_0 missing");
        vals_r__ = context__.vals_r("w_0");
        pos__ = 0U;
        context__.validate_dims("initialization", "w_0", "double", context__.to_vec());
        double w_0(0);
        w_0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,w_0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable w_0: ") + e.what());
        }

        if (!(context__.contains_r("w_1")))
            throw std::runtime_error("variable w_1 missing");
        vals_r__ = context__.vals_r("w_1");
        pos__ = 0U;
        context__.validate_dims("initialization", "w_1", "double", context__.to_vec());
        double w_1(0);
        w_1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,w_1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable w_1: ") + e.what());
        }

        if (!(context__.contains_r("a_0")))
            throw std::runtime_error("variable a_0 missing");
        vals_r__ = context__.vals_r("a_0");
        pos__ = 0U;
        context__.validate_dims("initialization", "a_0", "double", context__.to_vec());
        double a_0(0);
        a_0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(a_0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_0: ") + e.what());
        }

        if (!(context__.contains_r("b_0")))
            throw std::runtime_error("variable b_0 missing");
        vals_r__ = context__.vals_r("b_0");
        pos__ = 0U;
        context__.validate_dims("initialization", "b_0", "double", context__.to_vec());
        double b_0(0);
        b_0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(b_0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b_0: ") + e.what());
        }

        if (!(context__.contains_r("c_1")))
            throw std::runtime_error("variable c_1 missing");
        vals_r__ = context__.vals_r("c_1");
        pos__ = 0U;
        context__.validate_dims("initialization", "c_1", "double", context__.to_vec());
        double c_1(0);
        c_1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(c_1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable c_1: ") + e.what());
        }

        if (!(context__.contains_r("a_1")))
            throw std::runtime_error("variable a_1 missing");
        vals_r__ = context__.vals_r("a_1");
        pos__ = 0U;
        context__.validate_dims("initialization", "a_1", "double", context__.to_vec());
        double a_1(0);
        a_1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(a_1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a_1: ") + e.what());
        }

        if (!(context__.contains_r("alpha_1")))
            throw std::runtime_error("variable alpha_1 missing");
        vals_r__ = context__.vals_r("alpha_1");
        pos__ = 0U;
        context__.validate_dims("initialization", "alpha_1", "double", context__.to_vec());
        double alpha_1(0);
        alpha_1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha_1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha_1: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ w_0;
            (void) w_0;  // dummy to suppress unused var warning
            if (jacobian__)
                w_0 = in__.scalar_lb_constrain(0,lp__);
            else
                w_0 = in__.scalar_lb_constrain(0);

            local_scalar_t__ w_1;
            (void) w_1;  // dummy to suppress unused var warning
            if (jacobian__)
                w_1 = in__.scalar_lb_constrain(0,lp__);
            else
                w_1 = in__.scalar_lb_constrain(0);

            local_scalar_t__ a_0;
            (void) a_0;  // dummy to suppress unused var warning
            if (jacobian__)
                a_0 = in__.scalar_constrain(lp__);
            else
                a_0 = in__.scalar_constrain();

            local_scalar_t__ b_0;
            (void) b_0;  // dummy to suppress unused var warning
            if (jacobian__)
                b_0 = in__.scalar_constrain(lp__);
            else
                b_0 = in__.scalar_constrain();

            local_scalar_t__ c_1;
            (void) c_1;  // dummy to suppress unused var warning
            if (jacobian__)
                c_1 = in__.scalar_constrain(lp__);
            else
                c_1 = in__.scalar_constrain();

            local_scalar_t__ a_1;
            (void) a_1;  // dummy to suppress unused var warning
            if (jacobian__)
                a_1 = in__.scalar_constrain(lp__);
            else
                a_1 = in__.scalar_constrain();

            local_scalar_t__ alpha_1;
            (void) alpha_1;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_1 = in__.scalar_constrain(lp__);
            else
                alpha_1 = in__.scalar_constrain();

            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body
            {
            current_statement_begin__ = 38;
            validate_non_negative_index("ypred", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ypred(static_cast<Eigen::VectorXd::Index>(N));
            (void) ypred;  // dummy to suppress unused var warning

            stan::math::initialize(ypred, DUMMY_VAR__);
            stan::math::fill(ypred,DUMMY_VAR__);


            current_statement_begin__ = 40;
            lp_accum__.add(normal_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 41;
            lp_accum__.add(normal_log<propto__>(c_1, 1, 1));
            current_statement_begin__ = 42;
            lp_accum__.add(normal_log<propto__>(a_1, 1, 1));
            current_statement_begin__ = 45;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 46;
                stan::model::assign(ypred, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            f_comb(w_0,w_1,a_0,b_0,c_1,a_1,alpha_1,get_base1(x,n,"x",1), pstream__), 
                            "assigning variable ypred");
            }
            current_statement_begin__ = 48;
            lp_accum__.add(normal_log<propto__>(y, ypred, sigma));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("w_0");
        names__.push_back("w_1");
        names__.push_back("a_0");
        names__.push_back("b_0");
        names__.push_back("c_1");
        names__.push_back("a_1");
        names__.push_back("alpha_1");
        names__.push_back("sigma");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "LearningCurve_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double w_0 = in__.scalar_lb_constrain(0);
        double w_1 = in__.scalar_lb_constrain(0);
        double a_0 = in__.scalar_constrain();
        double b_0 = in__.scalar_constrain();
        double c_1 = in__.scalar_constrain();
        double a_1 = in__.scalar_constrain();
        double alpha_1 = in__.scalar_constrain();
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(w_0);
        vars__.push_back(w_1);
        vars__.push_back(a_0);
        vars__.push_back(b_0);
        vars__.push_back(c_1);
        vars__.push_back(a_1);
        vars__.push_back(alpha_1);
        vars__.push_back(sigma);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "LearningCurve_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "w_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "w_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "w_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef LearningCurve_model_namespace::LearningCurve_model stan_model;

