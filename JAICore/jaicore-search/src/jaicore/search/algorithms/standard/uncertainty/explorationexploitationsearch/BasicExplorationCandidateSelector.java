package jaicore.search.algorithms.standard.uncertainty.explorationexploitationsearch;

import java.util.List;
import java.util.stream.Collectors;

import jaicore.search.algorithms.standard.uncertainty.ISolutionDistanceMetric;
import jaicore.search.structure.core.Node;
import jaicore.search.structure.core.OpenCollection;

public class BasicExplorationCandidateSelector<T, V extends Comparable<V>> implements IExplorationCandidateSelector<T, V> {
	
	private double minimumSolutionDistanceForExploration;
	
	public BasicExplorationCandidateSelector(double minimumSolutionDistanceForExploration) {
		this.minimumSolutionDistanceForExploration = minimumSolutionDistanceForExploration;
	}
	
	@Override
	public List<Node<T, V>> selectExplorationCandidates(OpenCollection<Node<T, V>> allCandidates, ISolutionDistanceMetric<T> solutionDistanceMetric) {
		List<T> currentlyBestCandidate = allCandidates.peek().externalPath();
		return allCandidates.stream().filter(n -> {
			double solutionDistance = solutionDistanceMetric.calculateSolutionDistance(n.externalPath(), currentlyBestCandidate);
			return solutionDistance >= minimumSolutionDistanceForExploration;
		}).collect(Collectors.toList());
	}

}
